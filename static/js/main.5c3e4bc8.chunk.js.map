{"version":3,"sources":["components/CardRow.js","utils/mana.js","components/CMCPlot.js","components/Deck.js","components/Header.js","components/FilterSection.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["CardRow","props","toggleHover","bind","state","hover","cardImage","className","height","src","this","cardInfo","alt","onMouseEnter","onMouseLeave","data-image","manaCost","manaDict","code","manaList","match","i","length","push","getManaHTML","map","symbol","err","card_price","setState","React","Component","CMCPlot","cmcs","cmcCounts","mainboardData","forEach","card","parseInt","cmc","Math","trunc","maxCMC","max","data","Object","entries","key","value","toString","count","width","margin","top","right","left","bottom","dataKey","offset","position","fill","Deck","colors","uniqueCards","stats","mainboard","sideboard","nCol1Cards","floor","col1MainboardCards","slice","remainingMainboardCards","col1Mainboard","index","remainingMainboard","color","tags","tag","totalCardsMainboard","reduce","a","b","totalCardsSideboard","Card","Header","as","Row","Col","md","name","Body","Table","borderless","size","price","href","source","target","rel","Button","variant","block","Footer","Navbar","expand","bg","Container","Brand","FilterSection","allColors","allColorsLabel","handleChangeColor","handleSubmit","handleColorSwitch","event","changedColor","newColors","preventDefault","handleFilterSubmit","Accordion","defaultActiveKey","Toggle","eventKey","Collapse","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","id","Check","custom","inline","label","checked","onChange","onClick","App","decks","decksPerSet","filteredDecks","hasMoreDecks","selectedColors","filterOptionAllDecks","page","currentDeckNumber","newDeckSet","filter","deck","every","val","includes","some","indexOf","decksToShow","loader","Spinner","animation","role","deckCards","pageStart","loadMore","loadItems","hasMore","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5c3e4bc8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CardRow.css';\r\nimport '../css/mana.css';\r\nimport {getManaHTML} from '../utils/mana.js'\r\n// import Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass CardRow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggleHover = this.toggleHover.bind(this);\r\n    this.state = {\r\n      hover: false\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const cardImage = (\r\n      <div>\r\n        <img \r\n        className=\"cardImage\" \r\n        height=\"310\" \r\n        src={this.props.cardInfo['image_uris']['normal']} \r\n        alt={'Image of ' + this.props.cardInfo['card_name']}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    const card_price = () => {\r\n      if (this.props.cardInfo['is_land']) {\r\n        return \"\";\r\n      } else {\r\n        try {\r\n          return this.props.cardInfo['best_price'][1];\r\n        }\r\n        catch(err) {\r\n          return \"\";\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <tr>\r\n        <td>\r\n          { this.props.cardInfo['quantity'] }\r\n        </td>\r\n        <td onMouseEnter={this.toggleHover} onMouseLeave={this.toggleHover}>\r\n          <span data-image={ this.props.cardInfo['image_uris']['normal'] }>{ this.props.cardInfo['card_name'] }</span>\r\n          {this.state.hover ? cardImage : ''}\r\n        </td>\r\n        <td className=\"manaCost\">\r\n          { getManaHTML(this.props.cardInfo['mana_cost']).map((symbol) => symbol) }\r\n        </td>\r\n        <td className=\"bestPrice\">\r\n          {card_price()}\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  toggleHover() {\r\n    this.setState({\r\n      hover: !this.state.hover\r\n    })\r\n  }\r\n\r\n}\r\n\r\nexport default CardRow;\r\n","import React from 'react';\r\n\r\n\r\nexport function getManaHTML(manaCost) {\r\n  const manaDict = {\r\n    '{0}': <i className=\"ms ms-0 ms-cost\"></i>,\r\n    '{1}': <i className=\"ms ms-1 ms-cost\"></i>,\r\n    '{2}': <i className=\"ms ms-2 ms-cost\"></i>,\r\n    '{3}': <i className=\"ms ms-3 ms-cost\"></i>,\r\n    '{4}': <i className=\"ms ms-4 ms-cost\"></i>,\r\n    '{5}': <i className=\"ms ms-5 ms-cost\"></i>,\r\n    '{6}': <i className=\"ms ms-6 ms-cost\"></i>,\r\n    '{7}': <i className=\"ms ms-7 ms-cost\"></i>,\r\n    '{8}': <i className=\"ms ms-8 ms-cost\"></i>,\r\n    '{9}': <i className=\"ms ms-9 ms-cost\"></i>,\r\n    '{10}': <i className=\"ms ms-10 ms-cost\"></i>,\r\n    '{11}': <i className=\"ms ms-11 ms-cost\"></i>,\r\n    '{12}': <i className=\"ms ms-12 ms-cost\"></i>,\r\n    '{13}': <i className=\"ms ms-13 ms-cost\"></i>,\r\n    '{14}': <i className=\"ms ms-14 ms-cost\"></i>,\r\n    '{15}': <i className=\"ms ms-15 ms-cost\"></i>,\r\n    '{16}': <i className=\"ms ms-16 ms-cost\"></i>,\r\n    '{17}': <i className=\"ms ms-17 ms-cost\"></i>,\r\n    '{18}': <i className=\"ms ms-18 ms-cost\"></i>,\r\n    '{19}': <i className=\"ms ms-19 ms-cost\"></i>,\r\n    '{20}': <i className=\"ms ms-20 ms-cost\"></i>,\r\n    '{G}': <i className=\"ms ms-g ms-cost\"></i>,\r\n    '{R}': <i className=\"ms ms-r ms-cost\"></i>,\r\n    '{B}': <i className=\"ms ms-b ms-cost\"></i>,\r\n    '{U}': <i className=\"ms ms-u ms-cost\"></i>,\r\n    '{W}': <i className=\"ms ms-w ms-cost\"></i>,\r\n    '{C}': <i className=\"ms ms-c ms-cost\"></i>,\r\n    '{X}': <i className=\"ms ms-x ms-cost\"></i>,\r\n    '{G/P}': <i className=\"ms ms-cost ms-p ms-g\"></i>,\r\n    '{R/P}': <i className=\"ms ms-cost ms-p ms-r\"></i>,\r\n    '{B/P}': <i className=\"ms ms-cost ms-p ms-b\"></i>,\r\n    '{U/P}': <i className=\"ms ms-cost ms-p ms-u\"></i>,\r\n    '{W/P}': <i className=\"ms ms-cost ms-p ms-w\"></i>,\r\n    '{G/R}': <i className=\"ms ms-rg ms-split ms-cost\"></i>,\r\n    '{G/B}': <i className=\"ms ms-gb ms-split ms-cost\"></i>,\r\n    '{G/U}': <i className=\"ms ms-gu ms-split ms-cost\"></i>,\r\n    '{G/W}': <i className=\"ms ms-gw ms-split ms-cost\"></i>,\r\n    '{R/G}': <i className=\"ms ms-rg ms-split ms-cost\"></i>,\r\n    '{R/B}': <i className=\"ms ms-rb ms-split ms-cost\"></i>,\r\n    '{R/U}': <i className=\"ms ms-ru ms-split ms-cost\"></i>,\r\n    '{R/W}': <i className=\"ms ms-rw ms-split ms-cost\"></i>,\r\n    '{B/R}': <i className=\"ms ms-br ms-split ms-cost\"></i>,\r\n    '{B/G}': <i className=\"ms ms-bg ms-split ms-cost\"></i>,\r\n    '{B/U}': <i className=\"ms ms-bu ms-split ms-cost\"></i>,\r\n    '{B/W}': <i className=\"ms ms-bw ms-split ms-cost\"></i>,\r\n    '{U/R}': <i className=\"ms ms-ur ms-split ms-cost\"></i>,\r\n    '{U/B}': <i className=\"ms ms-ub ms-split ms-cost\"></i>,\r\n    '{U/G}': <i className=\"ms ms-ug ms-split ms-cost\"></i>,\r\n    '{U/W}': <i className=\"ms ms-uw ms-split ms-cost\"></i>,\r\n    '{W/R}': <i className=\"ms ms-wr ms-split ms-cost\"></i>,\r\n    '{W/B}': <i className=\"ms ms-wb ms-split ms-cost\"></i>,\r\n    '{W/U}': <i className=\"ms ms-wu ms-split ms-cost\"></i>,\r\n    '{W/G}': <i className=\"ms ms-wg ms-split ms-cost\"></i>\r\n  }\r\n\r\n  let code = []\r\n  if (manaCost) {\r\n    let manaList = manaCost.match(/\\{(.*?)\\}/g);\r\n    for(var i=0; i<manaList.length; i++){\r\n      code.push(manaDict[manaList[i]])\r\n    }\r\n  }\r\n  return code\r\n}\r\n","import React from 'react';\r\nimport {\r\n  ResponsiveContainer, BarChart, Bar, Label, LabelList, XAxis,\r\n} from 'recharts';\r\n\r\n\r\nclass CMCPlot extends React.Component {\r\n  \r\n  render() {\r\n\r\n    // Calculate counts of each CMC\r\n    let cmcs = [];\r\n    let cmcCounts = {};\r\n    this.props.mainboardData.forEach(function(card){\r\n      if (card['is_land']) {\r\n        return;\r\n      }\r\n      cmcs.push(parseInt(card['cmc']));  // Saves all cmcs\r\n      let cmc = Math.trunc(card['cmc']);\r\n      if (cmcCounts[cmc]) {\r\n        cmcCounts[cmc] += parseInt(card['quantity']);\r\n      } else {\r\n        cmcCounts[cmc] = parseInt(card['quantity']);\r\n      }\r\n    });\r\n\r\n    // Add missing CMCs with zero counts\r\n    const maxCMC = Math.max(...cmcs);\r\n    for (let i = 0; i < maxCMC + 1; i++) {\r\n      if (i in cmcCounts) {\r\n        continue;\r\n      } else {\r\n        cmcCounts[i] = 0;\r\n      }\r\n    }\r\n    \r\n    // Create data list from dict\r\n    let data = [];\r\n    for (const [key, value] of Object.entries(cmcCounts)) {\r\n      data.push({\r\n        cmc: key.toString(), count: value\r\n      })\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <ResponsiveContainer width='100%' height={250}>\r\n          <BarChart\r\n            data={data}\r\n            margin={{\r\n              top: 20, right: 0, left: 0, bottom: 40,\r\n            }}\r\n          >\r\n            <XAxis dataKey=\"cmc\">\r\n              <Label value=\"Converted mana cost distribution\" offset={0} position=\"bottom\" />\r\n            </XAxis>\r\n            <Bar dataKey=\"count\" fill=\"#93A8AC\">\r\n              <LabelList dataKey=\"count\" position=\"top\" />\r\n            </Bar>\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default CMCPlot;\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport CardRow from './CardRow';\r\nimport CMCPlot from './CMCPlot';\r\nimport './Deck.css';\r\nimport '../css/mana.css';\r\n\r\n\r\nclass Deck extends React.Component {\r\n\r\n  render() {\r\n    // Number of different cards in mainboard + sideboard\r\n    const uniqueCards = this.props.stats.mainboard.length + this.props.stats.sideboard.length;\r\n    // Distribute mainboard over 2 columns\r\n    const nCol1Cards = Math.floor(uniqueCards/2) + 2;\r\n    const col1MainboardCards = this.props.stats.mainboard.slice(0, nCol1Cards);\r\n    const remainingMainboardCards = this.props.stats.mainboard.slice(nCol1Cards);\r\n    // Create HTML for mainboard (col 1), mainboard (col 2), and sideboard\r\n    const col1Mainboard = col1MainboardCards.map((card, index) => \r\n      <CardRow key={index} cardInfo={card} />\r\n    );\r\n    const remainingMainboard = remainingMainboardCards.map((card, index) => \r\n      <CardRow key={index} cardInfo={card} />\r\n    );\r\n    const sideboard = this.props.stats.sideboard.map((card, index) => \r\n      <CardRow key={index} cardInfo={card} />\r\n    );\r\n\r\n    // Deck colors\r\n    let colors;\r\n    if (this.props.stats.color) {\r\n      colors = this.props.stats.color.map((color, index) => \r\n        <i key={index} className={\"ms ms-cost ms-\" + color}></i>\r\n      );\r\n    } else {\r\n      colors = '';\r\n    }\r\n\r\n    // Tags\r\n    const tagsList = this.props.stats.tags;\r\n    // console.log(tagsList);\r\n    const tags = tagsList.map((tag, index) => \r\n      <span key={index}><kbd>{tag}</kbd> </span>\r\n    );\r\n\r\n    // Stats\r\n    const totalCardsMainboard = this.props.stats.mainboard.map(\r\n      card => parseInt(card['quantity'])\r\n    ).reduce((a, b) => a + b, 0);\r\n\r\n    const totalCardsSideboard = this.props.stats.sideboard.map(\r\n      card => parseInt(card['quantity'])\r\n    ).reduce((a, b) => a + b, 0);\r\n    \r\n    return (\r\n      <div className=\"Deck mt-5\">\r\n        <Card>\r\n          <Card.Header as=\"h1\">\r\n            <Row>\r\n              <Col md={8}>\r\n                {this.props.stats.name}\r\n              </Col>\r\n              <Col md={4}>\r\n                <div className=\"float-right d-none d-lg-block\">\r\n                    {colors} \r\n                </div>\r\n              </Col>\r\n            </Row>\r\n\r\n            \r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              <Col md={4}>\r\n                <Table borderless size=\"sm\" className=\"mb-0\">\r\n                  <tbody>\r\n                    {col1Mainboard}\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n\r\n              <Col md={4}>\r\n                <Table borderless size=\"sm\">\r\n                  <tbody>\r\n                    {remainingMainboard}\r\n                  </tbody>\r\n                </Table>\r\n                <h6 className=\"card-title\">Sideboard ({totalCardsSideboard}):</h6>\r\n                <Table borderless size=\"sm\">\r\n                  <tbody>\r\n                    {sideboard}\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n\r\n              <Col md={4}>\r\n                <Table borderless size=\"sm\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Price:</td>\r\n                      <td className=\"text-right\">{this.props.stats.price}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Total cards:</td>\r\n                      <td className=\"text-right\">{totalCardsMainboard + totalCardsSideboard} ({totalCardsMainboard} + {totalCardsSideboard})</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Source:</td>\r\n                      <td className=\"text-right\"><a href={this.props.stats.source[1]} target=\"_blank\" rel=\"noopener noreferrer\">{this.props.stats.source[0]}</a></td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n\r\n                <CMCPlot mainboardData={this.props.stats.mainboard} />\r\n\r\n                <Button variant=\"outline-dark\" block>Download</Button>\r\n                \r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n          <Card.Footer className=\"text-muted\">\r\n            Tags: {tags}\r\n          </Card.Footer>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Deck;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n// import Nav from 'react-bootstrap/Nav';\r\n// import Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport './Header.css';\r\n\r\n\r\nclass Header extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n          <Container>\r\n            <Navbar.Brand href=\"#home\">The Pauper Deck Library</Navbar.Brand>\r\n            {/* <Nav className=\"mr-auto\">\r\n              <Nav.Link href=\"#home\">Home</Nav.Link>\r\n              <Nav.Link href=\"#features\">Features</Nav.Link>\r\n              <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\r\n            </Nav> */}\r\n          </Container>\r\n        </Navbar>\r\n\r\n        {/* <Jumbotron fluid className=\"jumbotron\">\r\n          <Container>\r\n            <h1 className=\"mainTitle\">Pauper Deck Library</h1>\r\n            <p className=\"subTitle\">\r\n              This is a collection of Pauper Decks.\r\n            </p>\r\n          </Container>\r\n        </Jumbotron> */}\r\n      </header>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form'\r\n// import Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass FilterSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      colors: {\r\n        \"w\": false,\r\n        \"u\": false,\r\n        \"b\": false,\r\n        \"r\": false,\r\n        \"g\": false,\r\n        \"c\": false\r\n      },\r\n      allColors: false,\r\n      allColorsLabel: \"Contains at lest one of the selected colors\"\r\n    };\r\n\r\n    this.handleChangeColor = this.handleChangeColor.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleColorSwitch = this.handleColorSwitch.bind(this);\r\n  }\r\n\r\n  handleChangeColor(event) {\r\n    const changedColor = event.target.name;\r\n    const newColors = {...this.state.colors};\r\n    newColors[changedColor] = !this.state.colors[changedColor];\r\n\r\n    this.setState({\r\n      colors: newColors\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    // console.log(this.state.colors);\r\n    this.props.handleFilterSubmit(this.state);\r\n  }\r\n\r\n  handleColorSwitch(event) {\r\n    if (this.state.allColors) {\r\n      this.setState({\r\n        allColors: false,\r\n        allColorsLabel: \"Contains at lest one of the selected colors\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        allColors: true,\r\n        allColorsLabel: \"Contains all of the selected colors\"\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const colors = ['w', 'u', 'b', 'r', 'g', 'c'];\r\n\r\n    return (\r\n      <Accordion defaultActiveKey=\"0\" className=\"mt-5\">\r\n        <Card className=\"\">\r\n          <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n            Filter Decks\r\n          </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"0\">\r\n            <Card.Body>\r\n              \r\n            <Form onSubmit={this.handleSubmit}>\r\n              <Form.Row>\r\n                <Form.Group as={Col} controlId=\"formGridName\">\r\n                  <Form.Label>Name</Form.Label>\r\n                  <Form.Control type=\"text\" placeholder=\"burn\" />\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} controlId=\"formGridTag\">\r\n                  <Form.Label>Tag</Form.Label>\r\n                  <Form.Control type=\"text\" placeholder=\"aggro\" />\r\n                </Form.Group>\r\n              </Form.Row>\r\n\r\n              {/* <Form.Group controlId=\"formGridAddress1\">\r\n                <Form.Label>Address</Form.Label>\r\n                <Form.Control placeholder=\"1234 Main St\" />\r\n              </Form.Group> */}\r\n\r\n              <Form.Row>\r\n                <Form.Group as={Col} controlId=\"formGridCity\">\r\n                  <Form.Label>City</Form.Label>\r\n                  <Form.Control />\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} controlId=\"formGridState\">\r\n                  <Form.Label>State</Form.Label>\r\n                  <Form.Control as=\"select\" value=\"Choose...\">\r\n                    <option>Choose...</option>\r\n                    <option>...</option>\r\n                  </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} controlId=\"formGridZip\">\r\n                  <Form.Label>Zip</Form.Label>\r\n                  <Form.Control />\r\n                </Form.Group>\r\n              </Form.Row>\r\n\r\n              <Form.Group id=\"colorCheckboxes\">\r\n                <Form.Label className=\"pr-md-5 d-none d-md-block\">Color:</Form.Label>\r\n                {colors.map((color, index) => (\r\n                  <Form.Check custom inline\r\n                    key={index} \r\n                    id={\"color\" + index} \r\n                    type=\"checkbox\" \r\n                    name={color}\r\n                    label={<i className={\"ms ms-cost ms-\" + color}></i>} \r\n                    checked={this.state.colors[color]}\r\n                    onChange={this.handleChangeColor}\r\n                  />\r\n                ))}\r\n\r\n                <span className=\"pr-4 pl-4\"></span>\r\n\r\n                <Form.Check inline \r\n                  id=\"anyAllSwitch\"\r\n                  type=\"switch\" \r\n                  name=\"anyAll\"\r\n                  label={this.state.allColorsLabel} \r\n                  onChange={this.handleColorSwitch}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Button variant=\"dark\" type=\"submit\" className=\"w-100\" onClick={this.handleSubmit}>\r\n                Filter!\r\n              </Button>\r\n            </Form>\r\n\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default FilterSection;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n// import Navbar from 'react-bootstrap/Navbar';\r\n// import Nav from 'react-bootstrap/Nav';\r\n// import './Footer.css';\r\n\r\n\r\nclass Footer extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <footer className=\"footer mt-5 pt-3 pb-3 bg-light\">\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"text-muted\">\r\n                Created by \r\n                <a href=\"https://www.reddit.com/message/compose/?to=Synergix\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  u/Synergix\r\n                </a>\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </footer>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Spinner from 'react-bootstrap/Spinner';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport './App.css';\nimport Deck from './components/Deck';\nimport Header from './components/Header';\nimport FilterSection from './components/FilterSection';\nimport Footer from './components/Footer';\nimport decks from './data/decks.json'\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.decks = decks;\n    this.decksPerSet = 10;\n    this.state = {\n      filteredDecks: this.decks,\n      decks: this.decks.slice(0, this.decksPerSet - 1), \n      hasMoreDecks: true,\n      selectedColors: [],\n      filterOptionAllDecks: false,\n    }\n  }\n\n  loadItems(page) {\n    let currentDeckNumber = this.state.decks.length;\n    let newDeckSet = this.state.filteredDecks.slice(currentDeckNumber, currentDeckNumber + this.decksPerSet);\n    let decks = [...this.state.decks, ...newDeckSet];\n\n    if ((currentDeckNumber + this.decksPerSet) >= this.state.filteredDecks.length) {\n      this.setState({\n        decks: decks,\n        hasMoreDecks: false\n      })\n    } else {\n      this.setState({\n        decks: decks\n      })\n    }\n  }\n\n  decksToShow() {\n    if (this.state.filterOptionAllDecks) {\n      const filteredDecks = decks.filter(deck => this.state.selectedColors.every((val) => deck.color.includes(val)));\n      this.setState({\n        filteredDecks: filteredDecks,\n        decks: filteredDecks.slice(0, this.decksPerSet - 1)\n      })\n    } else {    \n      const filteredDecks = this.decks.filter(deck => deck.color.some((val) => this.state.selectedColors.indexOf(val) !== -1));\n      this.setState({\n        filteredDecks: filteredDecks,\n        decks: filteredDecks.slice(0, this.decksPerSet - 1)\n      });\n    }\n  }\n\n  handleFilterSubmit(data) {\n    this.setState({\n      filterOptionAllDecks: data.allColors\n    });\n    \n    let selectedColors = [];\n    for (const [ key, value ] of Object.entries(data.colors)) {\n      if (data.colors[key]) {\n        selectedColors.push(key);\n      }\n    }\n    if (selectedColors && selectedColors.length) {\n      this.setState({\n        selectedColors: selectedColors\n      }, this.decksToShow);\n    } else {\n      this.setState({\n        filteredDecks: this.decks,\n        decks: this.decks.slice(0, this.decksPerSet - 1),\n        selectedColors: []\n      });\n    }\n  }\n\n  render() {\n    const loader = (\n      <div className=\"mt-5 text-center\">\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      </div>\n    );\n\n    const deckCards = this.state.decks.map((deck, index) => \n      <Deck key={deck.name} stats={deck} />\n    );\n\n    return (\n      <div className=\"App\">\n        <Header />\n\n        <Container>\n          <FilterSection handleFilterSubmit={(data) => this.handleFilterSubmit(data)} />\n\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={this.loadItems.bind(this)}\n            hasMore={this.state.hasMoreDecks}\n            loader={loader}\n          >\n            {deckCards}\n          </InfiniteScroll>\n\n        </Container>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}