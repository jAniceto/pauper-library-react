{"version":3,"sources":["logo-transparent.svg","components/CardRow.js","utils/mana.js","components/CMCPlot.js","components/DeckDownload.js","components/Deck.js","components/FilterSection.js","utils/families.js","utils/capitalize.js","pages/index.js","components/DeckTable.js","pages/deck-index.js","pages/about.js","pages/random.js","utils/random.js","pages/deck-detail.js","pages/404.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardRow","props","toggleHover","bind","state","hover","handleCardClick","event","this","cardInfo","cardImage","className","height","src","alt","onMouseEnter","onMouseLeave","onClick","data-image","window","innerWidth","manaCost","manaDict","code","manaList","match","i","length","push","getManaHTML","map","symbol","err","card_price","setState","React","Component","CMCPlot","cmcs","cmcCounts","mainboardData","forEach","card","parseInt","cmc","Math","trunc","maxCMC","max","data","Object","entries","key","value","toString","count","width","margin","top","right","left","bottom","dataKey","offset","position","fill","DeckDownload","downloadDeckTxt","deckMainboardText","mainboard","deckSideboardText","sideboard","fullDeckTxt","concat","join","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","deckName","body","appendChild","click","Button","variant","block","Deck","colors","uniqueCards","stats","nCol1Cards","floor","col1MainboardCards","slice","remainingMainboardCards","col1Mainboard","index","remainingMainboard","color","tags","tag","totalCardsMainboard","reduce","a","b","totalCardsSideboard","Card","Header","as","Row","Col","md","name","Body","Table","borderless","size","price","source","target","rel","Link","to","toLowerCase","Footer","FilterSection","filterSectionExpanded","allColors","allColorsLabel","family","handleFilterExpand","handleDeckNameInput","handleTagInput","handleCardInput","handleChangeColor","handleColorSwitch","handleSelectChange","handleSubmit","handleResetButton","changedColor","newColors","preventDefault","handleFilterSubmit","handleFilterReset","dataList","getElementById","input","request","XMLHttpRequest","onreadystatechange","response","readyState","status","JSON","parse","responseText","item","option","placeholder","open","send","filterSectionHeader","icon","faAngleUp","faAngleDown","Accordion","defaultActiveKey","Toggle","eventKey","style","cursor","Collapse","Form","onSubmit","Group","controlId","Label","Control","onChange","id","list","string","charAt","toUpperCase","Check","custom","inline","label","checked","faSearch","DeckShowcase","decks","decksPerSet","filteredDecks","hasMoreDecks","inputDeckName","inputTag","inputCard","selectedFamily","selectedColors","filterOptionAllDecks","showCardImageModal","handleCardModalClose","page","currentDeckNumber","newDeckSet","nameList","split","filter","deck","every","val","includes","tagList","cardName","some","card_name","indexOf","filterDecks","loader","Spinner","animation","role","deckCards","Modal","show","onHide","aria-labelledby","centered","closeButton","Container","pageStart","loadMore","loadItems","hasMore","deckList","colorList","c","t","useMemo","columns","accessor","sortType","Cell","e","disableSortBy","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","faSortDown","faSortUp","row","getRowProps","cells","cell","getCellProps","DeckIndex","class","AboutPage","faqList","faqs","faq","q","dangerouslySetInnerHTML","__html","RandomDeckPage","getRandomDeck","handleRandomButton","deckNumber","randomIndex","random","randomizeButton","DeckPage","nameString","console","log","getDeckFromName","useParams","PageNotFound","Navbar","collapseOnSelect","expand","bg","Brand","logo","aria-controls","Nav","App","ReactGA","initialize","pageview","location","pathname","search","exact","path","Boolean","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e477cd9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-transparent.1915b88a.svg\";","import React from 'react';\r\nimport './CardRow.css';\r\nimport '../css/mana.css';\r\nimport {getManaHTML} from '../utils/mana.js'\r\n// import Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass CardRow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggleHover = this.toggleHover.bind(this);\r\n    this.state = {\r\n      hover: false\r\n    }\r\n\r\n    this.handleCardClick = this.handleCardClick.bind(this);\r\n  }\r\n\r\n  handleCardClick(event) {\r\n    this.props.handleCardClick(this.props.cardInfo);\r\n  }\r\n\r\n  render() {\r\n    const cardImage = (\r\n      <div>\r\n        <img \r\n        className=\"cardImage\" \r\n        height=\"310\" \r\n        src={this.props.cardInfo['image_uris']['normal']} \r\n        alt={'Image of ' + this.props.cardInfo['card_name']}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    const card_price = () => {\r\n      if (this.props.cardInfo['is_land']) {\r\n        return \"\";\r\n      } else {\r\n        try {\r\n          return this.props.cardInfo['best_price'][1];\r\n        }\r\n        catch(err) {\r\n          return \"\";\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <tr>\r\n        <td className=\"fit\">\r\n          { this.props.cardInfo['quantity'] }\r\n        </td>\r\n        <td onMouseEnter={this.toggleHover} onMouseLeave={this.toggleHover}>\r\n          <span onClick={this.handleCardClick} data-image={ this.props.cardInfo['image_uris']['normal'] }>{ this.props.cardInfo['card_name'] }</span>\r\n          {this.state.hover && (window.innerWidth >= 768) ? cardImage : ''}\r\n        </td>\r\n        <td className=\"manaCost\">\r\n          { getManaHTML(this.props.cardInfo['mana_cost']).map((symbol) => symbol) }\r\n        </td>\r\n        <td className=\"bestPrice fit\">\r\n          {card_price()}\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  toggleHover() {\r\n    this.setState({\r\n      hover: !this.state.hover\r\n    })\r\n  }\r\n\r\n}\r\n\r\nexport default CardRow;\r\n","import React from 'react';\r\n\r\n\r\nexport function getManaHTML(manaCost) {\r\n  const manaDict = {\r\n    '{0}': <i className=\"ms ms-0 ms-cost\"></i>,\r\n    '{1}': <i className=\"ms ms-1 ms-cost\"></i>,\r\n    '{2}': <i className=\"ms ms-2 ms-cost\"></i>,\r\n    '{3}': <i className=\"ms ms-3 ms-cost\"></i>,\r\n    '{4}': <i className=\"ms ms-4 ms-cost\"></i>,\r\n    '{5}': <i className=\"ms ms-5 ms-cost\"></i>,\r\n    '{6}': <i className=\"ms ms-6 ms-cost\"></i>,\r\n    '{7}': <i className=\"ms ms-7 ms-cost\"></i>,\r\n    '{8}': <i className=\"ms ms-8 ms-cost\"></i>,\r\n    '{9}': <i className=\"ms ms-9 ms-cost\"></i>,\r\n    '{10}': <i className=\"ms ms-10 ms-cost\"></i>,\r\n    '{11}': <i className=\"ms ms-11 ms-cost\"></i>,\r\n    '{12}': <i className=\"ms ms-12 ms-cost\"></i>,\r\n    '{13}': <i className=\"ms ms-13 ms-cost\"></i>,\r\n    '{14}': <i className=\"ms ms-14 ms-cost\"></i>,\r\n    '{15}': <i className=\"ms ms-15 ms-cost\"></i>,\r\n    '{16}': <i className=\"ms ms-16 ms-cost\"></i>,\r\n    '{17}': <i className=\"ms ms-17 ms-cost\"></i>,\r\n    '{18}': <i className=\"ms ms-18 ms-cost\"></i>,\r\n    '{19}': <i className=\"ms ms-19 ms-cost\"></i>,\r\n    '{20}': <i className=\"ms ms-20 ms-cost\"></i>,\r\n    '{G}': <i className=\"ms ms-g ms-cost\"></i>,\r\n    '{R}': <i className=\"ms ms-r ms-cost\"></i>,\r\n    '{B}': <i className=\"ms ms-b ms-cost\"></i>,\r\n    '{U}': <i className=\"ms ms-u ms-cost\"></i>,\r\n    '{W}': <i className=\"ms ms-w ms-cost\"></i>,\r\n    '{C}': <i className=\"ms ms-c ms-cost\"></i>,\r\n    '{X}': <i className=\"ms ms-x ms-cost\"></i>,\r\n    '{G/P}': <i className=\"ms ms-cost ms-p ms-g\"></i>,\r\n    '{R/P}': <i className=\"ms ms-cost ms-p ms-r\"></i>,\r\n    '{B/P}': <i className=\"ms ms-cost ms-p ms-b\"></i>,\r\n    '{U/P}': <i className=\"ms ms-cost ms-p ms-u\"></i>,\r\n    '{W/P}': <i className=\"ms ms-cost ms-p ms-w\"></i>,\r\n    '{G/R}': <i className=\"ms ms-rg ms-split ms-cost\"></i>,\r\n    '{G/B}': <i className=\"ms ms-gb ms-split ms-cost\"></i>,\r\n    '{G/U}': <i className=\"ms ms-gu ms-split ms-cost\"></i>,\r\n    '{G/W}': <i className=\"ms ms-gw ms-split ms-cost\"></i>,\r\n    '{R/G}': <i className=\"ms ms-rg ms-split ms-cost\"></i>,\r\n    '{R/B}': <i className=\"ms ms-rb ms-split ms-cost\"></i>,\r\n    '{R/U}': <i className=\"ms ms-ru ms-split ms-cost\"></i>,\r\n    '{R/W}': <i className=\"ms ms-rw ms-split ms-cost\"></i>,\r\n    '{B/R}': <i className=\"ms ms-br ms-split ms-cost\"></i>,\r\n    '{B/G}': <i className=\"ms ms-bg ms-split ms-cost\"></i>,\r\n    '{B/U}': <i className=\"ms ms-bu ms-split ms-cost\"></i>,\r\n    '{B/W}': <i className=\"ms ms-bw ms-split ms-cost\"></i>,\r\n    '{U/R}': <i className=\"ms ms-ur ms-split ms-cost\"></i>,\r\n    '{U/B}': <i className=\"ms ms-ub ms-split ms-cost\"></i>,\r\n    '{U/G}': <i className=\"ms ms-ug ms-split ms-cost\"></i>,\r\n    '{U/W}': <i className=\"ms ms-uw ms-split ms-cost\"></i>,\r\n    '{W/R}': <i className=\"ms ms-wr ms-split ms-cost\"></i>,\r\n    '{W/B}': <i className=\"ms ms-wb ms-split ms-cost\"></i>,\r\n    '{W/U}': <i className=\"ms ms-wu ms-split ms-cost\"></i>,\r\n    '{W/G}': <i className=\"ms ms-wg ms-split ms-cost\"></i>\r\n  }\r\n\r\n  let code = []\r\n  if (manaCost) {\r\n    let manaList = manaCost.match(/\\{(.*?)\\}/g);\r\n    for(var i=0; i<manaList.length; i++){\r\n      code.push(manaDict[manaList[i]])\r\n    }\r\n  }\r\n  return code\r\n}\r\n","import React from 'react';\r\nimport {\r\n  ResponsiveContainer, BarChart, Bar, Label, LabelList, XAxis,\r\n} from 'recharts';\r\n\r\n\r\nclass CMCPlot extends React.Component {\r\n  \r\n  render() {\r\n\r\n    // Calculate counts of each CMC\r\n    let cmcs = [];\r\n    let cmcCounts = {};\r\n    this.props.mainboardData.forEach(function(card){\r\n      if (card['is_land']) {\r\n        return;\r\n      }\r\n      cmcs.push(parseInt(card['cmc']));  // Saves all cmcs\r\n      let cmc = Math.trunc(card['cmc']);\r\n      if (cmcCounts[cmc]) {\r\n        cmcCounts[cmc] += parseInt(card['quantity']);\r\n      } else {\r\n        cmcCounts[cmc] = parseInt(card['quantity']);\r\n      }\r\n    });\r\n\r\n    // Add missing CMCs with zero counts\r\n    const maxCMC = Math.max(...cmcs);\r\n    for (let i = 0; i < maxCMC + 1; i++) {\r\n      if (i in cmcCounts) {\r\n        continue;\r\n      } else {\r\n        cmcCounts[i] = 0;\r\n      }\r\n    }\r\n    \r\n    // Create data list from dict\r\n    let data = [];\r\n    for (const [key, value] of Object.entries(cmcCounts)) {\r\n      data.push({\r\n        cmc: key.toString(), count: value\r\n      })\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <ResponsiveContainer width='100%' height={250}>\r\n          <BarChart\r\n            data={data}\r\n            margin={{\r\n              top: 20, right: 0, left: 0, bottom: 40,\r\n            }}\r\n          >\r\n            <XAxis dataKey=\"cmc\">\r\n              <Label value=\"Converted mana cost distribution\" offset={0} position=\"bottom\" />\r\n            </XAxis>\r\n            <Bar dataKey=\"count\" fill=\"#93A8AC\">\r\n              <LabelList dataKey=\"count\" position=\"top\" />\r\n            </Bar>\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default CMCPlot;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass DeckDownload extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  downloadDeckTxt = () => {\r\n    let deckMainboardText = this.props.mainboard.map((card) => \r\n      `${card[\"quantity\"]} ${card[\"name\"]} \\n`\r\n    )\r\n    let deckSideboardText = this.props.sideboard.map((card) => \r\n      `${card[\"quantity\"]} ${card[\"name\"]} \\n`\r\n    )\r\n    let fullDeckTxt = deckMainboardText.concat([\"\\n\"]).concat(deckSideboardText).join(\"\");\r\n\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([fullDeckTxt], {type: 'text/plain'});\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = `${this.props.deckName}.txt`;\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Button variant=\"outline-dark\" block onClick={this.downloadDeckTxt}>Download .txt</Button>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default DeckDownload;\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport CardRow from './CardRow';\r\nimport CMCPlot from './CMCPlot';\r\nimport DeckDownload from './DeckDownload';\r\nimport { Link } from \"react-router-dom\";\r\nimport './Deck.css';\r\nimport '../css/mana.css';\r\n\r\n\r\nclass Deck extends React.Component {\r\n\r\n  render() {\r\n    // Number of different cards in mainboard + sideboard\r\n    const uniqueCards = this.props.stats.mainboard.length + this.props.stats.sideboard.length;\r\n    // Distribute mainboard over 2 columns\r\n    const nCol1Cards = Math.floor(uniqueCards/2) + 2;\r\n    const col1MainboardCards = this.props.stats.mainboard.slice(0, nCol1Cards);\r\n    const remainingMainboardCards = this.props.stats.mainboard.slice(nCol1Cards);\r\n    // Create HTML for mainboard (col 1), mainboard (col 2), and sideboard\r\n    const col1Mainboard = col1MainboardCards.map((card, index) => \r\n      <CardRow \r\n        key={index} \r\n        cardInfo={card} \r\n        handleCardClick={this.props.handleCardClick}\r\n      />\r\n    );\r\n    const remainingMainboard = remainingMainboardCards.map((card, index) => \r\n      <CardRow \r\n        key={index} \r\n        cardInfo={card} \r\n        handleCardClick={this.props.handleCardClick}\r\n      />\r\n    );\r\n    const sideboard = this.props.stats.sideboard.map((card, index) => \r\n      <CardRow \r\n        key={index} \r\n        cardInfo={card} \r\n        handleCardClick={this.props.handleCardClick}\r\n      />\r\n    );\r\n\r\n    // Deck colors\r\n    let colors;\r\n    if (this.props.stats.color) {\r\n      colors = this.props.stats.color.map((color, index) => \r\n        <i key={index} className={\"ms ms-cost ms-\" + color}></i>\r\n      );\r\n    } else {\r\n      colors = '';\r\n    }\r\n\r\n    // Tags\r\n    const tagsList = this.props.stats.tags;\r\n    // console.log(tagsList);\r\n    const tags = tagsList.map((tag, index) => \r\n      <span key={index}><kbd>{tag}</kbd> </span>\r\n    );\r\n\r\n    // Stats\r\n    const totalCardsMainboard = this.props.stats.mainboard.map(\r\n      card => parseInt(card['quantity'])\r\n    ).reduce((a, b) => a + b, 0);\r\n\r\n    const totalCardsSideboard = this.props.stats.sideboard.map(\r\n      card => parseInt(card['quantity'])\r\n    ).reduce((a, b) => a + b, 0);\r\n    \r\n    return (\r\n      <div className=\"Deck mt-5\">\r\n        <Card>\r\n          <Card.Header as=\"h1\" className=\"card-header-text\">\r\n            <Row>\r\n              <Col md={8}>\r\n                {this.props.stats.name}\r\n              </Col>\r\n              <Col md={4}>\r\n                <div className=\"float-right d-none d-lg-block\">\r\n                    {colors} \r\n                </div>\r\n              </Col>\r\n            </Row>\r\n\r\n            \r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              <Col md={4}>\r\n                <Table borderless size=\"sm\" className=\"mb-0\">\r\n                  <tbody>\r\n                    {col1Mainboard}\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n\r\n              <Col md={4}>\r\n                <Table borderless size=\"sm\">\r\n                  <tbody>\r\n                    {remainingMainboard}\r\n                  </tbody>\r\n                </Table>\r\n                <h6 className=\"card-title\">Sideboard ({totalCardsSideboard}):</h6>\r\n                <Table borderless size=\"sm\">\r\n                  <tbody>\r\n                    {sideboard}\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n\r\n              <Col md={4}>\r\n                <Table borderless size=\"sm\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Price:</td>\r\n                      <td className=\"text-right\">{this.props.stats.price} tix</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Total cards:</td>\r\n                      <td className=\"text-right\">{totalCardsMainboard + totalCardsSideboard} ({totalCardsMainboard} + {totalCardsSideboard})</td>\r\n                    </tr>\r\n\r\n                    <tr className={this.props.stats.source[0] ? \"\": \"d-none\"}>\r\n                      <td>Source:</td>\r\n                      <td className=\"text-right\"><a href={this.props.stats.source[1]} target=\"_blank\" rel=\"noopener noreferrer\">{this.props.stats.source[0]}</a></td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n\r\n                <CMCPlot mainboardData={this.props.stats.mainboard} />\r\n\r\n                <DeckDownload \r\n                  deckName={this.props.stats.name}\r\n                  mainboard={this.props.stats.mainboard} \r\n                  sideboard={this.props.stats.sideboard} \r\n                />\r\n\r\n                <Button as={Link} to={`/deck/${this.props.stats.name.toLowerCase()}`} className=\"w-100 mt-2\" variant=\"outline-dark\">Details</Button>\r\n                \r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n          <Card.Footer className=\"text-muted\">\r\n            Tags: {tags}\r\n          </Card.Footer>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Deck;\r\n","import React from 'react';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { getDeckFamilies, getFamiliesSymbolsHTML } from '../utils/families.js';\r\nimport { getManaHTML } from '../utils/mana.js';\r\nimport { capitalizeString } from '../utils/capitalize.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch, faAngleUp, faAngleDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nclass FilterSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filterSectionExpanded: true,\r\n      colors: {\r\n        \"w\": false,\r\n        \"u\": false,\r\n        \"b\": false,\r\n        \"r\": false,\r\n        \"g\": false,\r\n        \"c\": false\r\n      },\r\n      allColors: false,\r\n      allColorsLabel: \"At least one of the selected colors\",\r\n      family: \"none\",\r\n      deckName: \"\",\r\n      tag: \"\",\r\n      card: \"\"\r\n    };\r\n\r\n    this.handleFilterExpand = this.handleFilterExpand.bind(this);\r\n    this.handleDeckNameInput = this.handleDeckNameInput.bind(this);\r\n    this.handleTagInput = this.handleTagInput.bind(this);\r\n    this.handleCardInput = this.handleCardInput.bind(this);\r\n    this.handleChangeColor = this.handleChangeColor.bind(this);\r\n    this.handleColorSwitch = this.handleColorSwitch.bind(this);\r\n    this.handleSelectChange = this.handleSelectChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleResetButton = this.handleResetButton.bind(this);\r\n  }\r\n\r\n  handleFilterExpand(event) {\r\n    this.setState({\r\n      filterSectionExpanded: !this.state.filterSectionExpanded\r\n    });\r\n  }\r\n\r\n  handleDeckNameInput(event) {\r\n    this.setState({\r\n      deckName: event.target.value\r\n    });\r\n  }\r\n\r\n  handleTagInput(event) {\r\n    this.setState({\r\n      tag: event.target.value\r\n    });\r\n  }\r\n\r\n  handleCardInput(event) {\r\n    this.setState({\r\n      card: event.target.value\r\n    });\r\n  }\r\n\r\n  handleChangeColor(event) {\r\n    const changedColor = event.target.name;\r\n    const newColors = {...this.state.colors};\r\n    newColors[changedColor] = !this.state.colors[changedColor];\r\n\r\n    this.setState({\r\n      colors: newColors\r\n    });\r\n  }\r\n\r\n  handleColorSwitch(event) {\r\n    if (this.state.allColors) {\r\n      this.setState({\r\n        allColors: false,\r\n        allColorsLabel: \"At least one of the selected colors\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        allColors: true,\r\n        allColorsLabel: \"All of the selected colors\"\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSelectChange(event) {\r\n    this.setState({ \r\n      family: event.target.value\r\n     });\r\n  };\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    // console.log(this.state.colors);\r\n    this.props.handleFilterSubmit(this.state);\r\n  }\r\n  \r\n  handleResetButton(event) {\r\n    this.setState({\r\n      colors: {\r\n        \"w\": false,\r\n        \"u\": false,\r\n        \"b\": false,\r\n        \"r\": false,\r\n        \"g\": false,\r\n        \"c\": false\r\n      },\r\n      allColors: false,\r\n      allColorsLabel: \"At least one of the selected colors\",\r\n      family: \"none\",\r\n      deckName: \"\",\r\n      tag: \"\",\r\n      card: \"\"\r\n    }, this.props.handleFilterReset(this.state));\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Get the <datalist> and <input> elements.\r\n    var dataList = document.getElementById('mtgo-card-names');\r\n    var input = document.getElementById('name-input');\r\n\r\n    // Create a new XMLHttpRequest.\r\n    var request = new XMLHttpRequest();\r\n\r\n    // Handle state changes for the request.\r\n    request.onreadystatechange = function(response) {\r\n      if (request.readyState === 4) {\r\n        if (request.status === 200) {\r\n          // Parse the JSON\r\n          var jsonOptions = JSON.parse(request.responseText);\r\n\r\n          // Loop over the JSON array.\r\n          jsonOptions['data'].forEach(function(item) {\r\n            // Create a new <option> element.\r\n            var option = document.createElement('option');\r\n            // Set the value using the item in the JSON array.\r\n            option.value = item;\r\n            // Add the <option> element to the <datalist>.\r\n            dataList.appendChild(option);\r\n          });\r\n\r\n          // Update the placeholder text.\r\n          input.placeholder = \"Rancor\";\r\n        } else {\r\n          // An error occured :(\r\n          input.placeholder = \"Couldn't load datalist options.\";\r\n        }\r\n      }\r\n    };\r\n\r\n    // Update the placeholder text.\r\n    input.placeholder = \"Loading options...\";\r\n\r\n    // Set up and make the request.\r\n    request.open('GET', 'https://api.scryfall.com/catalog/card-names', true);\r\n    request.send();\r\n  }\r\n\r\n  render() {\r\n    const colors = ['w', 'u', 'b', 'r', 'g', 'c'];\r\n\r\n    // Filter section header\r\n    let filterSectionHeader;\r\n    if (this.state.filterSectionExpanded) {\r\n      filterSectionHeader = <div><FontAwesomeIcon icon={faAngleUp} /> Filter Decks <FontAwesomeIcon icon={faAngleUp} /></div>;\r\n    } else {\r\n      filterSectionHeader = <div><FontAwesomeIcon icon={faAngleDown} /> Filter Decks <FontAwesomeIcon icon={faAngleDown} /></div>;\r\n    }\r\n\r\n    return (\r\n      <Accordion defaultActiveKey=\"0\" className=\"mt-5\">\r\n        <Card className=\"\">\r\n          <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"text-center\" onClick={this.handleFilterExpand} style={{cursor: 'pointer'}}>\r\n            {filterSectionHeader}\r\n          </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"0\">\r\n            <Card.Body>\r\n              \r\n            <Form onSubmit={this.handleSubmit}>\r\n              <Form.Row>\r\n                <Form.Group as={Col} md={6} controlId=\"formGridName\">\r\n                  <Form.Label>By Deck Name</Form.Label>\r\n                  <Form.Control \r\n                    type=\"text\" \r\n                    placeholder=\"Stompy\" \r\n                    value={this.state.deckName} \r\n                    onChange={this.handleDeckNameInput}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} md={6} controlId=\"formGridTag\">\r\n                  <Form.Label>By Tag</Form.Label>\r\n                  <Form.Control \r\n                    type=\"text\" \r\n                    placeholder=\"Mill\"\r\n                    value={this.state.tag} \r\n                    onChange={this.handleTagInput} \r\n                  />\r\n                </Form.Group>\r\n              </Form.Row>\r\n\r\n              <Form.Row>\r\n                <Form.Group as={Col} md={6}>  {/*controlId=\"formGridCardName\"*/}\r\n                  <Form.Label>By Card</Form.Label>\r\n                  <Form.Control \r\n                    type=\"text\" \r\n                    id=\"name-input\" \r\n                    list=\"mtgo-card-names\"\r\n                    value={this.state.card} \r\n                    onChange={this.handleCardInput} \r\n                  />\r\n                  <datalist id=\"mtgo-card-names\"></datalist>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} md={6} controlId=\"formGridFamily\">\r\n                  <Form.Label>By Guild/Shard/Clan</Form.Label>\r\n                  <Form.Control as=\"select\" onChange={this.handleSelectChange} value={this.state.family}>\r\n                    <option value=\"none\">\r\n                      Choose...\r\n                    </option>\r\n                    {getDeckFamilies().map((family, index) =>\r\n                      <option key={family} value={family}>\r\n                        {capitalizeString(family)}\r\n                      </option>\r\n                    )}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n\r\n              </Form.Row>\r\n\r\n              <Form.Group id=\"colorCheckboxes\">\r\n                <Form.Label className=\"pr-md-5 d-none d-md-block\">By Color</Form.Label>\r\n                {colors.map((color, index) => (\r\n                  <Form.Check custom inline\r\n                    key={index} \r\n                    id={\"color\" + index} \r\n                    type=\"checkbox\" \r\n                    name={color}\r\n                    label={<i className={\"ms ms-cost ms-\" + color}></i>} \r\n                    checked={this.state.colors[color]}\r\n                    onChange={this.handleChangeColor}\r\n                  />\r\n                ))}\r\n\r\n                <span className=\"pr-4 pl-4\"></span>\r\n\r\n                <Form.Check inline \r\n                  id=\"anyAllSwitch\"\r\n                  type=\"switch\" \r\n                  name=\"anyAll\"\r\n                  checked={this.state.allColors}\r\n                  label={this.state.allColorsLabel} \r\n                  onChange={this.handleColorSwitch}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Row>\r\n                <Col md=\"10\" className=\"mb-1 mb-md-0\">\r\n                  <Button variant=\"dark\" type=\"submit\" className=\"w-100\" onClick={this.handleSubmit}>\r\n                    <FontAwesomeIcon icon={faSearch} /> Filter!\r\n                  </Button>\r\n                </Col>\r\n\r\n                <Col md=\"2\" className=\"mb-1 mb-md-0\">\r\n                  <Button variant=\"outline-dark\" className=\"w-100\" onClick={this.handleResetButton}>\r\n                    Reset filters\r\n                  </Button>\r\n                </Col>\r\n              </Form.Row>\r\n\r\n            </Form>\r\n\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default FilterSection;\r\n","import React from 'react';\r\n\r\n\r\nexport function getDeckFamilies() {\r\n  return [\r\n    'white',\r\n    'blue',\r\n    'black',\r\n    'red',\r\n    'green',\r\n    'selesnya',\r\n    'orzhov',\r\n    'boros',\r\n    'azorius',\r\n    'dimir',\r\n    'rakdos',\r\n    'golgari',\r\n    'izzet',\r\n    'simic',\r\n    'gruul',\r\n    'naya',\r\n    'esper',\r\n    'grixis',\r\n    'jund',\r\n    'bant',\r\n    'abzan',\r\n    'temur',\r\n    'jeskai',\r\n    'mardu',\r\n    'sultai',\r\n    'glint',\r\n    'dune',\r\n    'ink',\r\n    'whitch',\r\n    'yore',\r\n    'domain',\r\n    'colorless'\r\n  ];\r\n}\r\n\r\nexport function getFamiliesSymbolsHTML(family) {\r\n  const manaSynbols = {\r\n    white: \"{W}\",\r\n    blue: \"{U}\",\r\n    black: \"{B}\",\r\n    red: \"{R}\",\r\n    green: \"{G}\",\r\n    selesnya: \"{W}{G}\",\r\n    orzhov: \"{W}{B}\",\r\n    boros: \"{W}{R}\",\r\n    azorius: \"{W}{U}\",\r\n    dimir: \"{U}{B}\",\r\n    rakdos: \"{B}{R}\",\r\n    golgari: \"{B}{G}\",\r\n    izzet: \"{U}{R}\",\r\n    simic: \"{U}{G}\",\r\n    gruul: \"{R}{G}\",\r\n    naya: \"{W}{R}{G}\",\r\n    esper: \"{W}{U}{B}\",\r\n    grixis: \"{U}{B}{R}\",\r\n    jund: \"{B}{R}{G}\",\r\n    bant: \"{W}{U}{G}\",\r\n    abzan: \"{W}{B}{G}\",\r\n    temur: \"{U}{R}{G}\",\r\n    jeskai: \"{W}{U}{R}\",\r\n    mardu: \"{W}{B}{R}\",\r\n    sultai: \"{U}{B}{G}\",\r\n    glint: \"{U}{B}{R}{G}\",\r\n    dune: \"{W}{B}{R}{G}\",\r\n    ink: \"{W}{U}{R}{G}\",\r\n    whitch: \"{W}{U}{B}{G}\",\r\n    yore: \"{W}{U}{B}{R}\",\r\n    domain: \"{W}{U}{B}{R}{G}\",\r\n    colorless: \"{C}\",\r\n  };\r\n\r\n  return manaSynbols[family];\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport function capitalizeString(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\n// import './DeckShowcase.css';\r\nimport Deck from '../components/Deck';\r\nimport FilterSection from '../components/FilterSection';\r\nimport decks from '../data/decks.json';\r\n\r\n\r\nclass DeckShowcase extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.decks = decks;\r\n    this.decksPerSet = 10;\r\n    this.state = {\r\n      filteredDecks: this.decks,\r\n      decks: this.decks.slice(0, this.decksPerSet - 1), \r\n      hasMoreDecks: true,\r\n      inputDeckName: \"\",\r\n      inputTag: \"\",\r\n      inputCard: \"\",\r\n      selectedFamily: \"none\",\r\n      selectedColors: [],\r\n      filterOptionAllDecks: false,\r\n      showCardImageModal: false,\r\n      cardImage: \"\"\r\n    }\r\n\r\n    this.handleCardClick = this.handleCardClick.bind(this);\r\n    this.handleCardModalClose = this.handleCardModalClose.bind(this);\r\n  }\r\n\r\n  loadItems(page) {\r\n    let currentDeckNumber = this.state.decks.length;\r\n    let newDeckSet = this.state.filteredDecks.slice(currentDeckNumber, currentDeckNumber + this.decksPerSet);\r\n    let decks = [...this.state.decks, ...newDeckSet];\r\n\r\n    if ((currentDeckNumber + this.decksPerSet) >= this.state.filteredDecks.length) {\r\n      this.setState({\r\n        decks: decks,\r\n        hasMoreDecks: false\r\n      })\r\n    } else {\r\n      this.setState({\r\n        decks: decks\r\n      })\r\n    }\r\n  }\r\n\r\n  filterDecks() {\r\n    // Run all filters sequentially\r\n    let filteredDecks = decks;\r\n\r\n    // Filter by deck name\r\n    if (this.state.inputDeckName != \"\") {\r\n      const nameList = this.state.inputDeckName.toLowerCase().split(\" \");\r\n      filteredDecks = filteredDecks.filter(deck => nameList.every((val) => deck.name.toLowerCase().includes(val)));\r\n    }\r\n\r\n    // Filter by tag\r\n    if (this.state.inputTag != \"\") {\r\n      const tagList = this.state.inputTag.toLowerCase().split(\" \");\r\n      filteredDecks = filteredDecks.filter(deck => tagList.every((val) => deck.tags.includes(val)));\r\n    }\r\n\r\n    // Filter by card\r\n    if (this.state.inputCard != \"\") {\r\n      const cardName = this.state.inputCard.toLowerCase();\r\n      filteredDecks = filteredDecks.filter(deck => deck.mainboard.some(card => card.card_name.toLowerCase() === cardName));\r\n    }\r\n    \r\n    // Filter by family\r\n    if (this.state.selectedFamily != \"none\") {\r\n      filteredDecks = filteredDecks.filter(deck => deck.family === this.state.selectedFamily);\r\n    }\r\n\r\n    // Filter by colors\r\n    if (this.state.selectedColors && this.state.selectedColors.length) {\r\n      if (this.state.filterOptionAllDecks) {\r\n        filteredDecks = filteredDecks.filter(deck => this.state.selectedColors.every((val) => deck.color.includes(val)));\r\n      } else {    \r\n        filteredDecks = filteredDecks.filter(deck => deck.color.some((val) => this.state.selectedColors.indexOf(val) !== -1));\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      filteredDecks: filteredDecks,\r\n      decks: filteredDecks.slice(0, this.decksPerSet - 1)\r\n    })\r\n  }\r\n\r\n  handleFilterSubmit(data) {\r\n    // Create a list of color codes from the colors dict\r\n    let selectedColors = [];\r\n    for (const [ key, value ] of Object.entries(data.colors)) {\r\n      if (data.colors[key]) {\r\n        selectedColors.push(key);\r\n      }\r\n    }\r\n    // Update state and run filters\r\n    this.setState({\r\n      filterOptionAllDecks: data.allColors,\r\n      selectedColors: selectedColors,\r\n      selectedFamily: data.family,\r\n      inputDeckName: data.deckName,\r\n      inputTag: data.tag,\r\n      inputCard: data.card\r\n    }, this.filterDecks);\r\n  }\r\n\r\n  handleFilterReset(data) {\r\n    // Reset all filters (reset state)\r\n    this.setState({\r\n      filterOptionAllDecks: data.allColors,\r\n      filteredDecks: this.decks,\r\n      decks: decks.slice(0, this.decksPerSet - 1),\r\n      inputDeckName: \"\",\r\n      inputTag: \"\",\r\n      inputCard: \"\",\r\n      selectedFamily: \"none\",\r\n      selectedColors: [],\r\n      filterOptionAllDecks: false,\r\n    });\r\n  }\r\n\r\n  handleCardClick(data) {\r\n    // If on small screen, show modal\r\n    if (window.innerWidth < 768) {\r\n      this.setState({\r\n        showCardImageModal: !this.state.showCardImageModal ,\r\n        cardImage: data['image_uris']['normal']\r\n      });\r\n    }\r\n  }\r\n\r\n  handleCardModalClose() {\r\n    // Function to turn off modal\r\n    this.setState({\r\n      showCardImageModal: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const loader = (\r\n      <div className=\"mt-5 text-center\">\r\n        <Spinner animation=\"border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n      </div>\r\n    );\r\n\r\n    const deckCards = this.state.decks.map((deck, index) => \r\n      <Deck \r\n        key={deck.name} \r\n        stats={deck} \r\n        handleCardClick={this.handleCardClick}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <div className=\"DeckShowcase\">\r\n\r\n        <Modal\r\n          className=\"d-md-none\"\r\n          show={this.state.showCardImageModal}\r\n          onHide={this.handleCardModalClose}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Header closeButton>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n          <img \r\n            className=\"img-fluid\" \r\n            height=\"310\" \r\n            src={this.state.cardImage} \r\n            alt=\"Card image\"\r\n          />\r\n          </Modal.Body>\r\n        </Modal>\r\n\r\n\r\n        <Container>\r\n          <FilterSection \r\n            handleFilterSubmit={(data) => this.handleFilterSubmit(data)} \r\n            handleFilterReset={(data) => this.handleFilterReset(data)}\r\n          />\r\n\r\n          <InfiniteScroll\r\n            pageStart={0}\r\n            loadMore={this.loadItems.bind(this)}\r\n            hasMore={this.state.hasMoreDecks}\r\n            loader={loader}\r\n          >\r\n            {deckCards}\r\n          </InfiniteScroll>\r\n\r\n        </Container>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeckShowcase;\r\n","import React, { useMemo, useState, useEffect } from 'react';\r\nimport decks from '../data/decks.json';\r\nimport { useTable, useSortBy } from 'react-table';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSortUp, faSortDown, faSort } from '@fortawesome/free-solid-svg-icons';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default function Table() {\r\n  function colorsHTML(colorList) {\r\n    let colors;\r\n    if (colorList) {\r\n      colors = colorList.map((color, index) => \r\n        <i key={index} className={\"ms ms-cost ms-\" + color}></i>\r\n      );\r\n    } else {\r\n      colors = '';\r\n    }\r\n    return colors;\r\n  }\r\n\r\n  const deckList = decks.map((deck) => {\r\n    let c = colorsHTML(deck.color);\r\n    let t = deck.tags.map((tag, index) => <span key={index}><kbd>{tag}</kbd> </span>);\r\n    return {\r\n      name: deck.name,\r\n      color: c,\r\n      price: deck.price,  \r\n      tag: t\r\n    }\r\n  })\r\n\r\n  const data = React.useMemo(\r\n    () => deckList,\r\n    []\r\n  );\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Deck name',\r\n        accessor: 'name', // accessor is the \"key\" in the data\r\n        sortType: 'basic',\r\n        Cell: e => <Link to={`/deck/${e.value.toLowerCase()}`}>{e.value}</Link>\r\n      },\r\n      {\r\n        Header: 'Colors',\r\n        accessor: 'color',\r\n        // sortType: 'basic',\r\n        disableSortBy: true\r\n      },{\r\n        Header: 'Price (tix)',\r\n        accessor: 'price',\r\n        sortType: 'alphanumeric'\r\n      },{\r\n        Header: 'Tags',\r\n        accessor: 'tag',\r\n        disableSortBy: true\r\n      }\r\n    ],\r\n    []\r\n  ); \r\n\r\n  // Use the useTable Hook to send the columns and data to build the table\r\n  const {\r\n    getTableProps, // table props from react-table\r\n    getTableBodyProps, // table body props from react-table\r\n    headerGroups, // headerGroups, if your table has groupings\r\n    rows, // rows for the table based on the data passed\r\n    prepareRow // Prepare the row (this function needs to be called for each row before getting the row props)\r\n  } = useTable({\r\n      columns,\r\n      data\r\n    },\r\n    useSortBy\r\n  );\r\n\r\n  /* \r\n    Render the UI for your table\r\n    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n  */\r\n  \r\n  function name(params) {\r\n    \r\n  }\r\n\r\n  return (\r\n    <table className=\"table table-hover mt-3\" {...getTableProps()}>\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                {column.render('Header')}\r\n                <span>\r\n                  {column.isSorted ? (column.isSortedDesc ? <FontAwesomeIcon icon={faSortDown} /> : <FontAwesomeIcon icon={faSortUp} />) : ''}\r\n                </span>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map(\r\n          (row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                })}\r\n                {/* <td {...row.cells[0].getCellProps()}>\r\n                  <Link to={row.cells[0].toLowerCase().replace(\" \", \"-\")}>{row.cells[0].render('Cell')}</Link>\r\n                </td>\r\n                <td {...row.cells[1].getCellProps()}>{row.cells[1].render('Cell')}</td>\r\n                <td {...row.cells[2].getCellProps()}>{row.cells[2].render('Cell')}</td>\r\n                <td {...row.cells[3].getCellProps()}>{row.cells[3].render('Cell')}</td> */}\r\n              </tr>\r\n            )}\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}","import React, { useMemo, useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Table from 'react-bootstrap/Table';\r\nimport decks from '../data/decks.json';\r\nimport { useTable, useSortBy } from 'react-table';\r\nimport DeckTable from '../components/DeckTable';\r\n\r\nclass DeckIndex extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.decks = decks;\r\n  }\r\n  \r\n\r\n\r\n  render() {\r\n    function colorsHTML(colorList) {\r\n      let colors;\r\n      if (colorList) {\r\n        colors = colorList.map((color, index) => \r\n          <i key={index} className={\"ms ms-cost ms-\" + color}></i>\r\n        );\r\n      } else {\r\n        colors = '';\r\n      }\r\n      return colors;\r\n    }\r\n\r\n    return (\r\n      <div className=\"DeckIndex\">\r\n\r\n        <Container>\r\n          <h1 className=\"display-4 mt-5\">Deck Index</h1>\r\n          <div class=\"table-responsive\">\r\n            <DeckTable />\r\n          </div>\r\n        </Container>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeckIndex;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport faqs from '../data/faq.json';\r\n\r\n\r\nclass AboutPage extends React.Component {\r\n\r\n  render() {\r\n    const faqList = faqs.map((faq, index) => \r\n      <div>\r\n        <h4 key={index} class=\"mt-5\">{faq.q}</h4>\r\n        <p dangerouslySetInnerHTML={ {__html: faq.a} } />\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <Container>\r\n        <h1 className=\"display-4 mt-5\">About</h1>\r\n        {faqList}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AboutPage;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {getRandomInt} from '../utils/random.js';\r\nimport Deck from '../components/Deck';\r\nimport decks from '../data/decks.json';\r\n\r\n\r\nclass RandomDeckPage extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.decks = decks;\r\n    this.state = {\r\n      deck: this.decks[0]\r\n    }\r\n    \r\n    this.getRandomDeck = this.getRandomDeck.bind(this);\r\n    this.handleRandomButton = this.handleRandomButton.bind(this);\r\n  }\r\n\r\n  getRandomDeck() {\r\n    const deckNumber = this.decks.length;\r\n    let randomIndex = getRandomInt(deckNumber);\r\n    this.setState({\r\n      deck: this.decks[randomIndex]\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRandomDeck();\r\n  }\r\n\r\n  handleRandomButton(event) {\r\n    this.getRandomDeck();\r\n  }\r\n\r\n  render() {\r\n    // Random button\r\n    const randomizeButton = (\r\n      <Button className=\"mt-4\" variant=\"dark\" size=\"lg\" block onClick={this.handleRandomButton}>Get random deck!</Button>\r\n    );\r\n    \r\n    return (\r\n      <Container>\r\n        <h1 className=\"display-4 mt-5\">What to play?</h1>\r\n        {randomizeButton}\r\n        <Deck \r\n          key={this.state.deck.name} \r\n          stats={this.state.deck} \r\n        />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RandomDeckPage;\r\n","import React from 'react';\r\n\r\n\r\nexport function getRandomInt(max) {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Deck from '../components/Deck';\r\nimport decks from '../data/decks.json'; \r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nfunction DeckPage(props) {\r\n  function getDeckFromName(deckName) {\r\n    const nameString = deckName.toLowerCase();\r\n    console.log(decks.filter(deck => deck.name.toLowerCase() === nameString))\r\n    // return decks.filter(deck => nameString.every((val) => deck.name.toLowerCase().includes(val)))[0];\r\n    return decks.filter(deck => deck.name.toLowerCase() === nameString)[0];\r\n  }\r\n\r\n  let { deckName } = useParams();\r\n  const deck = getDeckFromName(deckName);\r\n\r\n  return (\r\n    <Container>\r\n      <Deck \r\n        key={deck.name} \r\n        stats={deck} \r\n      />\r\n      </Container>\r\n  );\r\n}\r\n\r\nexport default DeckPage;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass PageNotFound extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Container className=\"text-center\">\r\n        <h1 className=\"display-1 mt-5\">404</h1>\r\n        <p className=\"lead\">Oops!</p>\r\n        <p>The page you are looking for does not exist or is currently unavailable.</p>\r\n        <Button as={Link} to=\"/\" variant=\"outline-dark\">Go to homepage</Button>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PageNotFound;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport logo from '../logo-transparent.svg';\r\nimport './Header.css';\r\n\r\n\r\nclass Header extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n          <Container>\r\n            <Navbar.Brand as={Link} to=\"/\">\r\n              <img\r\n                alt=\"logo\"\r\n                src={logo}\r\n                width=\"30\"\r\n                height=\"30\"\r\n                className=\"d-inline-block align-top\"\r\n              />{' '}\r\n              Pauper Deck Library\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"ml-auto\">\r\n                <Nav.Link as={Link} to=\"/deck-index\">Index</Nav.Link>\r\n                <Nav.Link as={Link} to=\"/random\">Randomize</Nav.Link>\r\n                <Nav.Link as={Link} to=\"/about\">About</Nav.Link>\r\n                <Nav.Link href=\"https://forms.gle/oD6FDZNVqd7MLWqq5\" target=\"_blank\">Suggest Decklist</Nav.Link>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </header>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\n\r\nclass Footer extends React.Component {\r\n\r\n  render() {\r\n    var footerStyles = {\r\n        \"position\": \"absolute\",\r\n        \"bottom\": \"0\",\r\n        \"width\": \"100%\",\r\n        \"height\": \"60px\",\r\n        \"line-height\": \"60px\",\r\n        \"background-color\": \"#f5f5f5\"\r\n    }\r\n    return (\r\n      <footer class=\"footer\" style={footerStyles}>\r\n        <Container>\r\n          <span class=\"text-muted\">Created by <a href=\"https://www.reddit.com/message/compose/?to=Synergix\" target=\"_blank\">u/Synergix</a>.</span>\r\n        </Container>\r\n      </footer>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport {\r\n  HashRouter as Router,  // previously: BrowserRouter as Router\r\n  Route,\r\n  Switch,\r\n  Link,\r\n  Redirect,\r\n  useParams\r\n} from 'react-router-dom';\r\nimport ReactGA from 'react-ga';\r\nimport './App.css';\r\nimport DeckShowcase from './pages';\r\nimport DeckIndex from './pages/deck-index';\r\nimport AboutPage from './pages/about';\r\nimport RandomDeckPage from './pages/random';\r\nimport DeckPage from './pages/deck-detail';\r\nimport PageNotFound from './pages/404';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\n\r\n\r\nclass App extends React.Component {\r\n  \r\n\r\n  render() {\r\n    ReactGA.initialize('UA-58056773-11');\r\n    ReactGA.pageview(window.location.pathname + window.location.search);\r\n    return (<>\r\n      <Router>\r\n        <Header />\r\n        \r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <DeckShowcase />\r\n          </Route>\r\n          <Route exact path=\"/deck-index\">\r\n            <DeckIndex />\r\n          </Route>\r\n          <Route exact path=\"/about\">\r\n            <AboutPage />\r\n          </Route>\r\n          <Route exact path=\"/random\">\r\n            <RandomDeckPage />\r\n          </Route>\r\n          <Route path=\"/deck/:deckName\">\r\n            <DeckPage />\r\n          </Route>  \r\n          <Route exact path=\"/404\">\r\n            <PageNotFound />\r\n          </Route>\r\n          <Redirect to=\"/404\" />\r\n        </Switch>\r\n\r\n        <Footer />\r\n      </Router>\r\n    </>);\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}