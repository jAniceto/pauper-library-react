{"version":3,"sources":["logo-transparent.svg","pauper-library-logo-white.png","components/CardRow.js","utils/mana.js","components/CMCPlot.js","components/DeckDownload.js","components/Deck.js","components/Header.js","components/FilterSection.js","utils/families.js","utils/capitalize.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardRow","props","toggleHover","bind","state","hover","cardImage","className","height","src","this","cardInfo","alt","onMouseEnter","onMouseLeave","data-image","manaCost","manaDict","code","manaList","match","i","length","push","getManaHTML","map","symbol","err","card_price","setState","React","Component","CMCPlot","cmcs","cmcCounts","mainboardData","forEach","card","parseInt","cmc","Math","trunc","maxCMC","max","data","Object","entries","key","value","toString","count","width","margin","top","right","left","bottom","dataKey","offset","position","fill","DeckDownload","downloadDeckTxt","deckMainboardText","mainboard","deckSideboardText","sideboard","fullDeckTxt","concat","join","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","deckName","body","appendChild","click","Button","variant","block","onClick","Deck","colors","uniqueCards","stats","nCol1Cards","floor","col1MainboardCards","slice","remainingMainboardCards","col1Mainboard","index","remainingMainboard","color","tags","tag","totalCardsMainboard","reduce","a","b","totalCardsSideboard","Card","Header","as","Row","Col","md","name","Body","Table","borderless","size","price","source","target","rel","Footer","Navbar","expand","bg","Container","Brand","logo","FilterSection","filterSectionExpanded","allColors","allColorsLabel","family","handleFilterExpand","handleDeckNameInput","handleTagInput","handleCardInput","handleChangeColor","handleColorSwitch","handleSelectChange","handleSubmit","handleResetButton","event","changedColor","newColors","preventDefault","handleFilterSubmit","handleFilterReset","dataList","getElementById","input","request","XMLHttpRequest","onreadystatechange","response","readyState","status","JSON","parse","responseText","item","option","placeholder","open","send","filterSectionHeader","icon","faAngleUp","faAngleDown","Accordion","defaultActiveKey","Toggle","eventKey","style","cursor","Collapse","Form","onSubmit","Group","controlId","Label","Control","onChange","id","list","string","charAt","toUpperCase","Check","custom","inline","label","checked","faSearch","App","decks","decksPerSet","filteredDecks","hasMoreDecks","selectedColors","filterOptionAllDecks","selectedFamily","inputDeckName","page","currentDeckNumber","newDeckSet","nameList","toLowerCase","split","filter","deck","every","val","includes","tagList","inputTag","cardName","inputCard","some","card_name","indexOf","filterDecksByColor","filterDecksByFamily","filterDecksByName","filterDecksByTag","filterDecksByCard","loader","Spinner","animation","role","deckCards","pageStart","loadMore","loadItems","hasMore","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b5752cd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-transparent.7dc23d48.svg\";","module.exports = __webpack_public_path__ + \"static/media/pauper-library-logo-white.a6e7a7ad.png\";","import React from 'react';\r\nimport './CardRow.css';\r\nimport '../css/mana.css';\r\nimport {getManaHTML} from '../utils/mana.js'\r\n// import Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass CardRow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggleHover = this.toggleHover.bind(this);\r\n    this.state = {\r\n      hover: false\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const cardImage = (\r\n      <div>\r\n        <img \r\n        className=\"cardImage\" \r\n        height=\"310\" \r\n        src={this.props.cardInfo['image_uris']['normal']} \r\n        alt={'Image of ' + this.props.cardInfo['card_name']}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    const card_price = () => {\r\n      if (this.props.cardInfo['is_land']) {\r\n        return \"\";\r\n      } else {\r\n        try {\r\n          return this.props.cardInfo['best_price'][1];\r\n        }\r\n        catch(err) {\r\n          return \"\";\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <tr>\r\n        <td>\r\n          { this.props.cardInfo['quantity'] }\r\n        </td>\r\n        <td onMouseEnter={this.toggleHover} onMouseLeave={this.toggleHover}>\r\n          <span data-image={ this.props.cardInfo['image_uris']['normal'] }>{ this.props.cardInfo['card_name'] }</span>\r\n          {this.state.hover ? cardImage : ''}\r\n        </td>\r\n        <td className=\"manaCost\">\r\n          { getManaHTML(this.props.cardInfo['mana_cost']).map((symbol) => symbol) }\r\n        </td>\r\n        <td className=\"bestPrice\">\r\n          {card_price()}\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  toggleHover() {\r\n    this.setState({\r\n      hover: !this.state.hover\r\n    })\r\n  }\r\n\r\n}\r\n\r\nexport default CardRow;\r\n","import React from 'react';\r\n\r\n\r\nexport function getManaHTML(manaCost) {\r\n  const manaDict = {\r\n    '{0}': <i className=\"ms ms-0 ms-cost\"></i>,\r\n    '{1}': <i className=\"ms ms-1 ms-cost\"></i>,\r\n    '{2}': <i className=\"ms ms-2 ms-cost\"></i>,\r\n    '{3}': <i className=\"ms ms-3 ms-cost\"></i>,\r\n    '{4}': <i className=\"ms ms-4 ms-cost\"></i>,\r\n    '{5}': <i className=\"ms ms-5 ms-cost\"></i>,\r\n    '{6}': <i className=\"ms ms-6 ms-cost\"></i>,\r\n    '{7}': <i className=\"ms ms-7 ms-cost\"></i>,\r\n    '{8}': <i className=\"ms ms-8 ms-cost\"></i>,\r\n    '{9}': <i className=\"ms ms-9 ms-cost\"></i>,\r\n    '{10}': <i className=\"ms ms-10 ms-cost\"></i>,\r\n    '{11}': <i className=\"ms ms-11 ms-cost\"></i>,\r\n    '{12}': <i className=\"ms ms-12 ms-cost\"></i>,\r\n    '{13}': <i className=\"ms ms-13 ms-cost\"></i>,\r\n    '{14}': <i className=\"ms ms-14 ms-cost\"></i>,\r\n    '{15}': <i className=\"ms ms-15 ms-cost\"></i>,\r\n    '{16}': <i className=\"ms ms-16 ms-cost\"></i>,\r\n    '{17}': <i className=\"ms ms-17 ms-cost\"></i>,\r\n    '{18}': <i className=\"ms ms-18 ms-cost\"></i>,\r\n    '{19}': <i className=\"ms ms-19 ms-cost\"></i>,\r\n    '{20}': <i className=\"ms ms-20 ms-cost\"></i>,\r\n    '{G}': <i className=\"ms ms-g ms-cost\"></i>,\r\n    '{R}': <i className=\"ms ms-r ms-cost\"></i>,\r\n    '{B}': <i className=\"ms ms-b ms-cost\"></i>,\r\n    '{U}': <i className=\"ms ms-u ms-cost\"></i>,\r\n    '{W}': <i className=\"ms ms-w ms-cost\"></i>,\r\n    '{C}': <i className=\"ms ms-c ms-cost\"></i>,\r\n    '{X}': <i className=\"ms ms-x ms-cost\"></i>,\r\n    '{G/P}': <i className=\"ms ms-cost ms-p ms-g\"></i>,\r\n    '{R/P}': <i className=\"ms ms-cost ms-p ms-r\"></i>,\r\n    '{B/P}': <i className=\"ms ms-cost ms-p ms-b\"></i>,\r\n    '{U/P}': <i className=\"ms ms-cost ms-p ms-u\"></i>,\r\n    '{W/P}': <i className=\"ms ms-cost ms-p ms-w\"></i>,\r\n    '{G/R}': <i className=\"ms ms-rg ms-split ms-cost\"></i>,\r\n    '{G/B}': <i className=\"ms ms-gb ms-split ms-cost\"></i>,\r\n    '{G/U}': <i className=\"ms ms-gu ms-split ms-cost\"></i>,\r\n    '{G/W}': <i className=\"ms ms-gw ms-split ms-cost\"></i>,\r\n    '{R/G}': <i className=\"ms ms-rg ms-split ms-cost\"></i>,\r\n    '{R/B}': <i className=\"ms ms-rb ms-split ms-cost\"></i>,\r\n    '{R/U}': <i className=\"ms ms-ru ms-split ms-cost\"></i>,\r\n    '{R/W}': <i className=\"ms ms-rw ms-split ms-cost\"></i>,\r\n    '{B/R}': <i className=\"ms ms-br ms-split ms-cost\"></i>,\r\n    '{B/G}': <i className=\"ms ms-bg ms-split ms-cost\"></i>,\r\n    '{B/U}': <i className=\"ms ms-bu ms-split ms-cost\"></i>,\r\n    '{B/W}': <i className=\"ms ms-bw ms-split ms-cost\"></i>,\r\n    '{U/R}': <i className=\"ms ms-ur ms-split ms-cost\"></i>,\r\n    '{U/B}': <i className=\"ms ms-ub ms-split ms-cost\"></i>,\r\n    '{U/G}': <i className=\"ms ms-ug ms-split ms-cost\"></i>,\r\n    '{U/W}': <i className=\"ms ms-uw ms-split ms-cost\"></i>,\r\n    '{W/R}': <i className=\"ms ms-wr ms-split ms-cost\"></i>,\r\n    '{W/B}': <i className=\"ms ms-wb ms-split ms-cost\"></i>,\r\n    '{W/U}': <i className=\"ms ms-wu ms-split ms-cost\"></i>,\r\n    '{W/G}': <i className=\"ms ms-wg ms-split ms-cost\"></i>\r\n  }\r\n\r\n  let code = []\r\n  if (manaCost) {\r\n    let manaList = manaCost.match(/\\{(.*?)\\}/g);\r\n    for(var i=0; i<manaList.length; i++){\r\n      code.push(manaDict[manaList[i]])\r\n    }\r\n  }\r\n  return code\r\n}\r\n","import React from 'react';\r\nimport {\r\n  ResponsiveContainer, BarChart, Bar, Label, LabelList, XAxis,\r\n} from 'recharts';\r\n\r\n\r\nclass CMCPlot extends React.Component {\r\n  \r\n  render() {\r\n\r\n    // Calculate counts of each CMC\r\n    let cmcs = [];\r\n    let cmcCounts = {};\r\n    this.props.mainboardData.forEach(function(card){\r\n      if (card['is_land']) {\r\n        return;\r\n      }\r\n      cmcs.push(parseInt(card['cmc']));  // Saves all cmcs\r\n      let cmc = Math.trunc(card['cmc']);\r\n      if (cmcCounts[cmc]) {\r\n        cmcCounts[cmc] += parseInt(card['quantity']);\r\n      } else {\r\n        cmcCounts[cmc] = parseInt(card['quantity']);\r\n      }\r\n    });\r\n\r\n    // Add missing CMCs with zero counts\r\n    const maxCMC = Math.max(...cmcs);\r\n    for (let i = 0; i < maxCMC + 1; i++) {\r\n      if (i in cmcCounts) {\r\n        continue;\r\n      } else {\r\n        cmcCounts[i] = 0;\r\n      }\r\n    }\r\n    \r\n    // Create data list from dict\r\n    let data = [];\r\n    for (const [key, value] of Object.entries(cmcCounts)) {\r\n      data.push({\r\n        cmc: key.toString(), count: value\r\n      })\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <ResponsiveContainer width='100%' height={250}>\r\n          <BarChart\r\n            data={data}\r\n            margin={{\r\n              top: 20, right: 0, left: 0, bottom: 40,\r\n            }}\r\n          >\r\n            <XAxis dataKey=\"cmc\">\r\n              <Label value=\"Converted mana cost distribution\" offset={0} position=\"bottom\" />\r\n            </XAxis>\r\n            <Bar dataKey=\"count\" fill=\"#93A8AC\">\r\n              <LabelList dataKey=\"count\" position=\"top\" />\r\n            </Bar>\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default CMCPlot;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass DeckDownload extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  downloadDeckTxt = () => {\r\n    let deckMainboardText = this.props.mainboard.map((card) => \r\n      `${card[\"quantity\"]} ${card[\"name\"]} \\n`\r\n    )\r\n    let deckSideboardText = this.props.sideboard.map((card) => \r\n      `${card[\"quantity\"]} ${card[\"name\"]} \\n`\r\n    )\r\n    let fullDeckTxt = deckMainboardText.concat([\"\\n\"]).concat(deckSideboardText).join(\"\");\r\n\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([fullDeckTxt], {type: 'text/plain'});\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = `${this.props.deckName}.txt`;\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Button variant=\"outline-dark\" block onClick={this.downloadDeckTxt}>Download .txt</Button>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default DeckDownload;\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport CardRow from './CardRow';\r\nimport CMCPlot from './CMCPlot';\r\nimport DeckDownload from './DeckDownload';\r\nimport './Deck.css';\r\nimport '../css/mana.css';\r\n\r\n\r\nclass Deck extends React.Component {\r\n\r\n  render() {\r\n    // Number of different cards in mainboard + sideboard\r\n    const uniqueCards = this.props.stats.mainboard.length + this.props.stats.sideboard.length;\r\n    // Distribute mainboard over 2 columns\r\n    const nCol1Cards = Math.floor(uniqueCards/2) + 2;\r\n    const col1MainboardCards = this.props.stats.mainboard.slice(0, nCol1Cards);\r\n    const remainingMainboardCards = this.props.stats.mainboard.slice(nCol1Cards);\r\n    // Create HTML for mainboard (col 1), mainboard (col 2), and sideboard\r\n    const col1Mainboard = col1MainboardCards.map((card, index) => \r\n      <CardRow key={index} cardInfo={card} />\r\n    );\r\n    const remainingMainboard = remainingMainboardCards.map((card, index) => \r\n      <CardRow key={index} cardInfo={card} />\r\n    );\r\n    const sideboard = this.props.stats.sideboard.map((card, index) => \r\n      <CardRow key={index} cardInfo={card} />\r\n    );\r\n\r\n    // Deck colors\r\n    let colors;\r\n    if (this.props.stats.color) {\r\n      colors = this.props.stats.color.map((color, index) => \r\n        <i key={index} className={\"ms ms-cost ms-\" + color}></i>\r\n      );\r\n    } else {\r\n      colors = '';\r\n    }\r\n\r\n    // Tags\r\n    const tagsList = this.props.stats.tags;\r\n    // console.log(tagsList);\r\n    const tags = tagsList.map((tag, index) => \r\n      <span key={index}><kbd>{tag}</kbd> </span>\r\n    );\r\n\r\n    // Stats\r\n    const totalCardsMainboard = this.props.stats.mainboard.map(\r\n      card => parseInt(card['quantity'])\r\n    ).reduce((a, b) => a + b, 0);\r\n\r\n    const totalCardsSideboard = this.props.stats.sideboard.map(\r\n      card => parseInt(card['quantity'])\r\n    ).reduce((a, b) => a + b, 0);\r\n    \r\n    return (\r\n      <div className=\"Deck mt-5\">\r\n        <Card>\r\n          <Card.Header as=\"h1\">\r\n            <Row>\r\n              <Col md={8}>\r\n                {this.props.stats.name}\r\n              </Col>\r\n              <Col md={4}>\r\n                <div className=\"float-right d-none d-lg-block\">\r\n                    {colors} \r\n                </div>\r\n              </Col>\r\n            </Row>\r\n\r\n            \r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              <Col md={4}>\r\n                <Table borderless size=\"sm\" className=\"mb-0\">\r\n                  <tbody>\r\n                    {col1Mainboard}\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n\r\n              <Col md={4}>\r\n                <Table borderless size=\"sm\">\r\n                  <tbody>\r\n                    {remainingMainboard}\r\n                  </tbody>\r\n                </Table>\r\n                <h6 className=\"card-title\">Sideboard ({totalCardsSideboard}):</h6>\r\n                <Table borderless size=\"sm\">\r\n                  <tbody>\r\n                    {sideboard}\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n\r\n              <Col md={4}>\r\n                <Table borderless size=\"sm\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Price:</td>\r\n                      <td className=\"text-right\">{this.props.stats.price}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Total cards:</td>\r\n                      <td className=\"text-right\">{totalCardsMainboard + totalCardsSideboard} ({totalCardsMainboard} + {totalCardsSideboard})</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Source:</td>\r\n                      <td className=\"text-right\"><a href={this.props.stats.source[1]} target=\"_blank\" rel=\"noopener noreferrer\">{this.props.stats.source[0]}</a></td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n\r\n                <CMCPlot mainboardData={this.props.stats.mainboard} />\r\n\r\n                <DeckDownload \r\n                  deckName={this.props.stats.name}\r\n                  mainboard={this.props.stats.mainboard} \r\n                  sideboard={this.props.stats.sideboard} \r\n                />\r\n                \r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n          <Card.Footer className=\"text-muted\">\r\n            Tags: {tags}\r\n          </Card.Footer>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Deck;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n// import Nav from 'react-bootstrap/Nav';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport logo from '../logo-transparent.svg';\r\nimport logoBig from '../pauper-library-logo-white.png';\r\nimport './Header.css';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\nclass Header extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n          <Container>\r\n            <Navbar.Brand href=\"#home\">\r\n            <img\r\n              alt=\"logo\"\r\n              src={logo}\r\n              width=\"30\"\r\n              height=\"30\"\r\n              className=\"d-inline-block align-top\"\r\n            />{' '}\r\n            Pauper Deck Library\r\n          </Navbar.Brand>\r\n            {/* <Nav className=\"mr-auto\">\r\n              <Nav.Link href=\"#home\">Home</Nav.Link>\r\n              <Nav.Link href=\"#features\">Features</Nav.Link>\r\n              <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\r\n            </Nav> */}\r\n          </Container>\r\n        </Navbar>\r\n\r\n        {/* <Jumbotron fluid className=\"jumbotron bg-dark text-white\">\r\n          <Container>\r\n            <Row>\r\n              <Col md={{ span: 9 }}>\r\n                <h1 className=\"mainTitle\">Pauper Deck Library</h1>\r\n                <p className=\"subTitle text-muted\">\r\n                  A curated collection of Pauper Decks.\r\n                </p>\r\n              </Col>\r\n              <Col md={{ span: 2, offset: 1 }}>\r\n                <img\r\n                  alt=\"logo\"\r\n                  src={logoBig}\r\n                  className=\"d-inline-block align-top w-100\"\r\n                />\r\n              </Col>\r\n\r\n            </Row>\r\n          </Container> \r\n        </Jumbotron> */}\r\n      </header>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { getDeckFamilies, getFamiliesSymbolsHTML } from '../utils/families.js';\r\nimport { getManaHTML } from '../utils/mana.js'\r\nimport { capitalizeString } from '../utils/capitalize.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch, faAngleUp, faAngleDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nclass FilterSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filterSectionExpanded: true,\r\n      colors: {\r\n        \"w\": false,\r\n        \"u\": false,\r\n        \"b\": false,\r\n        \"r\": false,\r\n        \"g\": false,\r\n        \"c\": false\r\n      },\r\n      allColors: false,\r\n      allColorsLabel: \"Contains at lest one of the selected colors\",\r\n      family: \"none\",\r\n      deckName: \"\",\r\n      tag: \"\",\r\n      card: \"\"\r\n    };\r\n\r\n    this.handleFilterExpand = this.handleFilterExpand.bind(this);\r\n    this.handleDeckNameInput = this.handleDeckNameInput.bind(this);\r\n    this.handleTagInput = this.handleTagInput.bind(this);\r\n    this.handleCardInput = this.handleCardInput.bind(this);\r\n    this.handleChangeColor = this.handleChangeColor.bind(this);\r\n    this.handleColorSwitch = this.handleColorSwitch.bind(this);\r\n    this.handleSelectChange = this.handleSelectChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleResetButton = this.handleResetButton.bind(this);\r\n  }\r\n\r\n  handleFilterExpand(event) {\r\n    this.setState({\r\n      filterSectionExpanded: !this.state.filterSectionExpanded\r\n    });\r\n  }\r\n\r\n  handleDeckNameInput(event) {\r\n    this.setState({\r\n      deckName: event.target.value\r\n    });\r\n  }\r\n\r\n  handleTagInput(event) {\r\n    this.setState({\r\n      tag: event.target.value\r\n    });\r\n  }\r\n\r\n  handleCardInput(event) {\r\n    this.setState({\r\n      card: event.target.value\r\n    });\r\n  }\r\n\r\n  handleChangeColor(event) {\r\n    const changedColor = event.target.name;\r\n    const newColors = {...this.state.colors};\r\n    newColors[changedColor] = !this.state.colors[changedColor];\r\n\r\n    this.setState({\r\n      colors: newColors\r\n    });\r\n  }\r\n\r\n  handleColorSwitch(event) {\r\n    if (this.state.allColors) {\r\n      this.setState({\r\n        allColors: false,\r\n        allColorsLabel: \"Contains at lest one of the selected colors\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        allColors: true,\r\n        allColorsLabel: \"Contains all of the selected colors\"\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSelectChange(event) {\r\n    this.setState({ \r\n      family: event.target.value\r\n     });\r\n  };\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    // console.log(this.state.colors);\r\n    this.props.handleFilterSubmit(this.state);\r\n  }\r\n  \r\n  handleResetButton(event) {\r\n    this.setState({\r\n      colors: {\r\n        \"w\": false,\r\n        \"u\": false,\r\n        \"b\": false,\r\n        \"r\": false,\r\n        \"g\": false,\r\n        \"c\": false\r\n      },\r\n      allColors: false,\r\n      allColorsLabel: \"Contains at lest one of the selected colors\",\r\n      family: \"none\",\r\n      deckName: \"\",\r\n      tag: \"\",\r\n      card: \"\"\r\n    }, this.props.handleFilterReset(this.state));\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Get the <datalist> and <input> elements.\r\n    var dataList = document.getElementById('mtgo-card-names');\r\n    var input = document.getElementById('name-input');\r\n\r\n    // Create a new XMLHttpRequest.\r\n    var request = new XMLHttpRequest();\r\n\r\n    // Handle state changes for the request.\r\n    request.onreadystatechange = function(response) {\r\n      if (request.readyState === 4) {\r\n        if (request.status === 200) {\r\n          // Parse the JSON\r\n          var jsonOptions = JSON.parse(request.responseText);\r\n\r\n          // Loop over the JSON array.\r\n          jsonOptions['data'].forEach(function(item) {\r\n            // Create a new <option> element.\r\n            var option = document.createElement('option');\r\n            // Set the value using the item in the JSON array.\r\n            option.value = item;\r\n            // Add the <option> element to the <datalist>.\r\n            dataList.appendChild(option);\r\n          });\r\n\r\n          // Update the placeholder text.\r\n          input.placeholder = \"Rancor\";\r\n        } else {\r\n          // An error occured :(\r\n          input.placeholder = \"Couldn't load datalist options.\";\r\n        }\r\n      }\r\n    };\r\n\r\n    // Update the placeholder text.\r\n    input.placeholder = \"Loading options...\";\r\n\r\n    // Set up and make the request.\r\n    request.open('GET', 'https://api.scryfall.com/catalog/card-names', true);\r\n    request.send();\r\n  }\r\n\r\n  render() {\r\n    const colors = ['w', 'u', 'b', 'r', 'g', 'c'];\r\n\r\n    // Filter section header\r\n    let filterSectionHeader;\r\n    if (this.state.filterSectionExpanded) {\r\n      filterSectionHeader = <div><FontAwesomeIcon icon={faAngleUp} /> Filter Decks <FontAwesomeIcon icon={faAngleUp} /></div>;\r\n    } else {\r\n      filterSectionHeader = <div><FontAwesomeIcon icon={faAngleDown} /> Filter Decks <FontAwesomeIcon icon={faAngleDown} /></div>;\r\n    }\r\n\r\n    return (\r\n      <Accordion defaultActiveKey=\"0\" className=\"mt-5\">\r\n        <Card className=\"\">\r\n          <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"text-center\" onClick={this.handleFilterExpand} style={{cursor: 'pointer'}}>\r\n            {filterSectionHeader}\r\n          </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"0\">\r\n            <Card.Body>\r\n              \r\n            <Form onSubmit={this.handleSubmit}>\r\n              <Form.Row>\r\n                <Form.Group as={Col} md={6} controlId=\"formGridName\">\r\n                  <Form.Label>By Deck Name</Form.Label>\r\n                  <Form.Control \r\n                    type=\"text\" \r\n                    placeholder=\"Stompy\" \r\n                    value={this.state.deckName} \r\n                    onChange={this.handleDeckNameInput}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} md={6} controlId=\"formGridTag\">\r\n                  <Form.Label>By Tag</Form.Label>\r\n                  <Form.Control \r\n                    type=\"text\" \r\n                    placeholder=\"Mill\"\r\n                    value={this.state.tag} \r\n                    onChange={this.handleTagInput} \r\n                  />\r\n                </Form.Group>\r\n              </Form.Row>\r\n\r\n              <Form.Row>\r\n                <Form.Group as={Col} md={6}>  {/*controlId=\"formGridCardName\"*/}\r\n                  <Form.Label>By Card</Form.Label>\r\n                  <Form.Control \r\n                    type=\"text\" \r\n                    id=\"name-input\" \r\n                    list=\"mtgo-card-names\"\r\n                    value={this.state.card} \r\n                    onChange={this.handleCardInput} \r\n                  />\r\n                  <datalist id=\"mtgo-card-names\"></datalist>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} md={6} controlId=\"formGridFamily\">\r\n                  <Form.Label>By Guild/Shard/Clan</Form.Label>\r\n                  <Form.Control as=\"select\" onChange={this.handleSelectChange} value={this.state.family}>\r\n                    <option value=\"none\">\r\n                      Choose...\r\n                    </option>\r\n                    {getDeckFamilies().map((family, index) =>\r\n                      <option key={family} value={family}>\r\n                        {capitalizeString(family)}\r\n                      </option>\r\n                    )}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n\r\n              </Form.Row>\r\n\r\n              <Form.Group id=\"colorCheckboxes\">\r\n                <Form.Label className=\"pr-md-5 d-none d-md-block\">By Color</Form.Label>\r\n                {colors.map((color, index) => (\r\n                  <Form.Check custom inline\r\n                    key={index} \r\n                    id={\"color\" + index} \r\n                    type=\"checkbox\" \r\n                    name={color}\r\n                    label={<i className={\"ms ms-cost ms-\" + color}></i>} \r\n                    checked={this.state.colors[color]}\r\n                    onChange={this.handleChangeColor}\r\n                  />\r\n                ))}\r\n\r\n                <span className=\"pr-4 pl-4\"></span>\r\n\r\n                <Form.Check inline \r\n                  id=\"anyAllSwitch\"\r\n                  type=\"switch\" \r\n                  name=\"anyAll\"\r\n                  checked={this.state.allColors}\r\n                  label={this.state.allColorsLabel} \r\n                  onChange={this.handleColorSwitch}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Row>\r\n                <Col md=\"10\" className=\"mb-1 mb-md-0\">\r\n                  <Button variant=\"dark\" type=\"submit\" className=\"w-100\" onClick={this.handleSubmit}>\r\n                    <FontAwesomeIcon icon={faSearch} /> Filter!\r\n                  </Button>\r\n                </Col>\r\n\r\n                <Col md=\"2\" className=\"mb-1 mb-md-0\">\r\n                  <Button variant=\"outline-dark\" className=\"w-100\" onClick={this.handleResetButton}>\r\n                    Reset filters\r\n                  </Button>\r\n                </Col>\r\n              </Form.Row>\r\n\r\n            </Form>\r\n\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default FilterSection;\r\n","import React from 'react';\r\n\r\n\r\nexport function getDeckFamilies() {\r\n  return [\r\n    'white',\r\n    'blue',\r\n    'black',\r\n    'red',\r\n    'green',\r\n    'selesnya',\r\n    'orzhov',\r\n    'boros',\r\n    'azorius',\r\n    'dimir',\r\n    'rakdos',\r\n    'golgari',\r\n    'izzet',\r\n    'simic',\r\n    'gruul',\r\n    'naya',\r\n    'esper',\r\n    'grixis',\r\n    'jund',\r\n    'bant',\r\n    'abzan',\r\n    'temur',\r\n    'jeskai',\r\n    'mardu',\r\n    'sultai',\r\n    'glint',\r\n    'dune',\r\n    'ink',\r\n    'whitch',\r\n    'yore',\r\n    'domain',\r\n    'colorless'\r\n  ];\r\n}\r\n\r\nexport function getFamiliesSymbolsHTML(family) {\r\n  const manaSynbols = {\r\n    white: \"{W}\",\r\n    blue: \"{U}\",\r\n    black: \"{B}\",\r\n    red: \"{R}\",\r\n    green: \"{G}\",\r\n    selesnya: \"{W}{G}\",\r\n    orzhov: \"{W}{B}\",\r\n    boros: \"{W}{R}\",\r\n    azorius: \"{W}{U}\",\r\n    dimir: \"{U}{B}\",\r\n    rakdos: \"{B}{R}\",\r\n    golgari: \"{B}{G}\",\r\n    izzet: \"{U}{R}\",\r\n    simic: \"{U}{G}\",\r\n    gruul: \"{R}{G}\",\r\n    naya: \"{W}{R}{G}\",\r\n    esper: \"{W}{U}{B}\",\r\n    grixis: \"{U}{B}{R}\",\r\n    jund: \"{B}{R}{G}\",\r\n    bant: \"{W}{U}{G}\",\r\n    abzan: \"{W}{B}{G}\",\r\n    temur: \"{U}{R}{G}\",\r\n    jeskai: \"{W}{U}{R}\",\r\n    mardu: \"{W}{B}{R}\",\r\n    sultai: \"{U}{B}{G}\",\r\n    glint: \"{U}{B}{R}{G}\",\r\n    dune: \"{W}{B}{R}{G}\",\r\n    ink: \"{W}{U}{R}{G}\",\r\n    whitch: \"{W}{U}{B}{G}\",\r\n    yore: \"{W}{U}{B}{R}\",\r\n    domain: \"{W}{U}{B}{R}{G}\",\r\n    colorless: \"{C}\",\r\n  };\r\n\r\n  return manaSynbols[family];\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport function capitalizeString(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n// import './Footer.css';\r\n\r\n\r\nclass Footer extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <footer className=\"footer mt-5 pt-3 pb-3 bg-light\">\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"text-muted\">\r\n                Created by <a href=\"https://www.reddit.com/message/compose/?to=Synergix\" target=\"_blank\" rel=\"noopener noreferrer\">u/Synergix</a>\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </footer>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Spinner from 'react-bootstrap/Spinner';\nimport InfiniteScroll from 'react-infinite-scroller';\n\n// import { library } from '@fortawesome/fontawesome-svg-core'\n// import { search } from '@fortawesome/free-solid-svg-icons'\n// library.add(search)\n\nimport './App.css';\nimport Deck from './components/Deck';\nimport Header from './components/Header';\nimport FilterSection from './components/FilterSection';\nimport Footer from './components/Footer';\nimport decks from './data/decks.json'\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.decks = decks;\n    this.decksPerSet = 10;\n    this.state = {\n      filteredDecks: this.decks,\n      decks: this.decks.slice(0, this.decksPerSet - 1), \n      hasMoreDecks: true,\n      selectedColors: [],\n      filterOptionAllDecks: false,\n      selectedFamily: \"none\",\n      inputDeckName: \"\"\n    }\n  }\n\n  loadItems(page) {\n    let currentDeckNumber = this.state.decks.length;\n    let newDeckSet = this.state.filteredDecks.slice(currentDeckNumber, currentDeckNumber + this.decksPerSet);\n    let decks = [...this.state.decks, ...newDeckSet];\n\n    if ((currentDeckNumber + this.decksPerSet) >= this.state.filteredDecks.length) {\n      this.setState({\n        decks: decks,\n        hasMoreDecks: false\n      })\n    } else {\n      this.setState({\n        decks: decks\n      })\n    }\n  }\n\n  filterDecksByName() {\n    const nameList = this.state.inputDeckName.toLowerCase().split(\" \");\n    const filteredDecks = decks.filter(deck => nameList.every((val) => deck.name.toLowerCase().includes(val)));\n    this.setState({\n      filteredDecks: filteredDecks,\n      decks: filteredDecks.slice(0, this.decksPerSet - 1)\n    })\n  }\n\n  filterDecksByTag() {\n    const tagList = this.state.inputTag.toLowerCase().split(\" \");\n    const filteredDecks = decks.filter(deck => tagList.every((val) => deck.tags.includes(val)));\n    this.setState({\n      filteredDecks: filteredDecks,\n      decks: filteredDecks.slice(0, this.decksPerSet - 1)\n    })\n  }\n\n  filterDecksByCard() {\n    const cardName = this.state.inputCard.toLowerCase();\n    const filteredDecks = decks.filter(deck => deck.mainboard.some(card => card.card_name.toLowerCase() === cardName));\n    this.setState({\n      filteredDecks: filteredDecks,\n      decks: filteredDecks.slice(0, this.decksPerSet - 1)\n    })\n  }\n\n  filterDecksByColor() {\n    if (this.state.filterOptionAllDecks) {\n      const filteredDecks = decks.filter(deck => this.state.selectedColors.every((val) => deck.color.includes(val)));\n      this.setState({\n        filteredDecks: filteredDecks,\n        decks: filteredDecks.slice(0, this.decksPerSet - 1)\n      })\n    } else {    \n      const filteredDecks = this.decks.filter(deck => deck.color.some((val) => this.state.selectedColors.indexOf(val) !== -1));\n      this.setState({\n        filteredDecks: filteredDecks,\n        decks: filteredDecks.slice(0, this.decksPerSet - 1)\n      });\n    }\n  }\n\n  filterDecksByFamily() {\n    const filteredDecks = this.decks.filter(deck => deck.family === this.state.selectedFamily);\n    this.setState({\n      filteredDecks: filteredDecks,\n      decks: filteredDecks.slice(0, this.decksPerSet - 1)\n    })\n  }\n\n  handleFilterSubmit(data) {\n    this.setState({\n      filterOptionAllDecks: data.allColors\n    });\n    \n    let selectedColors = [];\n    for (const [ key, value ] of Object.entries(data.colors)) {\n      if (data.colors[key]) {\n        selectedColors.push(key);\n      }\n    }\n    if (selectedColors && selectedColors.length) {\n      this.setState({\n        selectedColors: selectedColors\n      }, this.filterDecksByColor);\n    } else {\n      this.setState({\n        filteredDecks: this.decks,\n        decks: this.decks.slice(0, this.decksPerSet - 1),\n        selectedColors: []\n      });\n    }\n\n    if (data.family != \"none\") {\n      this.setState({\n        filteredDecks: this.decks,\n        decks: this.decks.slice(0, this.decksPerSet - 1),\n        selectedFamily: data.family\n      }, this.filterDecksByFamily);\n    }\n\n    if (data.deckName != \"\") {\n      this.setState({\n        filteredDecks: this.decks,\n        decks: this.decks.slice(0, this.decksPerSet - 1),\n        inputDeckName: data.deckName\n      }, this.filterDecksByName);\n    }\n\n    if (data.tag != \"\") {\n      this.setState({\n        filteredDecks: this.decks,\n        decks: this.decks.slice(0, this.decksPerSet - 1),\n        inputTag: data.tag\n      }, this.filterDecksByTag);\n    }\n\n    if (data.card != \"\") {\n      this.setState({\n        filteredDecks: this.decks,\n        decks: this.decks.slice(0, this.decksPerSet - 1),\n        inputCard: data.card\n      }, this.filterDecksByCard);\n    }\n  }\n\n  handleFilterReset(data) {\n    this.setState({\n      filterOptionAllDecks: data.allColors,\n      filteredDecks: this.decks,\n      decks: decks.slice(0, this.decksPerSet - 1),\n      selectedColors: [],\n      selectedFamily: \"none\"\n    });\n  }\n\n  render() {\n    const loader = (\n      <div className=\"mt-5 text-center\">\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      </div>\n    );\n\n    const deckCards = this.state.decks.map((deck, index) => \n      <Deck key={deck.name} stats={deck} />\n    );\n\n    return (\n      <div className=\"App\">\n        <Header />\n\n        <Container>\n          <FilterSection \n            handleFilterSubmit={(data) => this.handleFilterSubmit(data)} \n            handleFilterReset={(data) => this.handleFilterReset(data)}\n          />\n\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={this.loadItems.bind(this)}\n            hasMore={this.state.hasMoreDecks}\n            loader={loader}\n          >\n            {deckCards}\n          </InfiniteScroll>\n\n        </Container>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}